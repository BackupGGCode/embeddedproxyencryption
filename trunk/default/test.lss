
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000014a4  00001538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800120  00800120  00001558  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000024e  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a61  00000000  00000000  00001806  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053b  00000000  00000000  00003267  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001110  00000000  00000000  000037a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e0  00000000  00000000  000048b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d0  00000000  00000000  00004a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012ef  00000000  00000000  00004f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00006253  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
       8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
       c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e4 ea       	ldi	r30, 0xA4	; 164
      ac:	f4 e1       	ldi	r31, 0x14	; 20
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a0 32       	cpi	r26, 0x20	; 32
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	11 e0       	ldi	r17, 0x01	; 1
      c0:	a0 e2       	ldi	r26, 0x20	; 32
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a4 32       	cpi	r26, 0x24	; 36
      ca:	b1 07       	cpc	r27, r17
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	0e 94 76 01 	call	0x2ec	; 0x2ec <main>
      d2:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <_exit>

000000d6 <__bad_interrupt>:
      d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <performSender>:
	display2CharsOn7SegBCD(RECEIVER_SIGNAL);

}

void performSender()
{
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
	unsigned char proxyReceivePort = PORTD_ID;
	unsigned char proxySendPort = PORTC_ID;
	//receiver public keys
	unsigned int e_s = 0x00;
	unsigned int n_s = 0x00;
	display2CharsOn7SegBCD(SENDER_SIGNAL);
      de:	8d ef       	ldi	r24, 0xFD	; 253
      e0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <display2CharsOn7SegBCD>
      e4:	80 e1       	ldi	r24, 0x10	; 16
      e6:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      e8:	29 e1       	ldi	r18, 0x19	; 25
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	f9 01       	movw	r30, r18
      ee:	31 97       	sbiw	r30, 0x01	; 1
      f0:	f1 f7       	brne	.-4      	; 0xee <performSender+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      f4:	d9 f7       	brne	.-10     	; 0xec <performSender+0x12>
	_delay_ms(1000.0);
	unsigned int *publicKey = (unsigned int*)malloc(sizeof(unsigned int)*2);
      f6:	84 e0       	ldi	r24, 0x04	; 4
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 29 08 	call	0x1052	; 0x1052 <malloc>
	publicKey = receivePublicKey(PROXY_SIGNAL, proxyReceivePort, SENDER_SIGNAL, proxySendPort);
      fe:	8e ef       	ldi	r24, 0xFE	; 254
     100:	6d e0       	ldi	r22, 0x0D	; 13
     102:	4d ef       	ldi	r20, 0xFD	; 253
     104:	2c e0       	ldi	r18, 0x0C	; 12
     106:	0e 94 18 06 	call	0xc30	; 0xc30 <receivePublicKey>
     10a:	ec 01       	movw	r28, r24
	e_s = (unsigned int)*(publicKey);
	display2CharsOn7SegBCD((unsigned char)e_s);
     10c:	88 81       	ld	r24, Y
     10e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <display2CharsOn7SegBCD>
     112:	80 e1       	ldi	r24, 0x10	; 16
     114:	97 e2       	ldi	r25, 0x27	; 39
     116:	29 e1       	ldi	r18, 0x19	; 25
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	f9 01       	movw	r30, r18
     11c:	31 97       	sbiw	r30, 0x01	; 1
     11e:	f1 f7       	brne	.-4      	; 0x11c <performSender+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     120:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     122:	d9 f7       	brne	.-10     	; 0x11a <performSender+0x40>
	_delay_ms(1000.0);
	n_s = (unsigned int)*(publicKey + 1);
	display2CharsOn7SegBCD((unsigned char)n_s);
     124:	8a 81       	ldd	r24, Y+2	; 0x02
     126:	0e 94 59 02 	call	0x4b2	; 0x4b2 <display2CharsOn7SegBCD>
     12a:	80 e1       	ldi	r24, 0x10	; 16
     12c:	97 e2       	ldi	r25, 0x27	; 39
     12e:	29 e1       	ldi	r18, 0x19	; 25
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	f9 01       	movw	r30, r18
     134:	31 97       	sbiw	r30, 0x01	; 1
     136:	f1 f7       	brne	.-4      	; 0x134 <performSender+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     138:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     13a:	d9 f7       	brne	.-10     	; 0x132 <performSender+0x58>
	_delay_ms(1000.0);
	display2CharsOn7SegBCD(SENDER_SIGNAL);
     13c:	8d ef       	ldi	r24, 0xFD	; 253
     13e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <display2CharsOn7SegBCD>
     142:	80 e1       	ldi	r24, 0x10	; 16
     144:	97 e2       	ldi	r25, 0x27	; 39
     146:	29 e1       	ldi	r18, 0x19	; 25
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	f9 01       	movw	r30, r18
     14c:	31 97       	sbiw	r30, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <performSender+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     150:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     152:	d9 f7       	brne	.-10     	; 0x14a <performSender+0x70>
	_delay_ms(1000.0);
}
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	08 95       	ret

0000015a <performReceiver>:
	display2CharsOn7SegBCD(PROXY_SIGNAL);

}

void performReceiver()
{
     15a:	2f 92       	push	r2
     15c:	3f 92       	push	r3
     15e:	4f 92       	push	r4
     160:	5f 92       	push	r5
     162:	6f 92       	push	r6
     164:	7f 92       	push	r7
     166:	8f 92       	push	r8
     168:	9f 92       	push	r9
     16a:	af 92       	push	r10
     16c:	bf 92       	push	r11
     16e:	cf 92       	push	r12
     170:	df 92       	push	r13
     172:	ef 92       	push	r14
     174:	ff 92       	push	r15
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
	unsigned char proxyReceivePort = PORTD_ID;
	unsigned char proxySendPort = PORTC_ID;
	sendCharToPort(proxySendPort, RECEIVER_SIGNAL);
     17e:	8c e0       	ldi	r24, 0x0C	; 12
     180:	6f ef       	ldi	r22, 0xFF	; 255
     182:	0e 94 98 02 	call	0x530	; 0x530 <sendCharToPort>
	display2CharsOn7SegBCD(RECEIVER_SIGNAL);
     186:	8f ef       	ldi	r24, 0xFF	; 255
     188:	0e 94 59 02 	call	0x4b2	; 0x4b2 <display2CharsOn7SegBCD>
     18c:	80 e1       	ldi	r24, 0x10	; 16
     18e:	97 e2       	ldi	r25, 0x27	; 39
     190:	29 e1       	ldi	r18, 0x19	; 25
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	f9 01       	movw	r30, r18
     196:	31 97       	sbiw	r30, 0x01	; 1
     198:	f1 f7       	brne	.-4      	; 0x196 <performReceiver+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19c:	d9 f7       	brne	.-10     	; 0x194 <performReceiver+0x3a>
	_delay_ms(1000.0);
	unsigned int *d_s = (unsigned int*)malloc(sizeof(unsigned int)*(NUM_PROXIES+1));
     19e:	84 e0       	ldi	r24, 0x04	; 4
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 29 08 	call	0x1052	; 0x1052 <malloc>
     1a6:	1c 01       	movw	r2, r24
	unsigned int *e_s = (unsigned int*)malloc(sizeof(unsigned int)*(NUM_PROXIES+1));
     1a8:	84 e0       	ldi	r24, 0x04	; 4
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 29 08 	call	0x1052	; 0x1052 <malloc>
     1b0:	2c 01       	movw	r4, r24
	unsigned int *n_s = (unsigned int*)malloc(sizeof(unsigned int)*(NUM_PROXIES+1));
     1b2:	84 e0       	ldi	r24, 0x04	; 4
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 29 08 	call	0x1052	; 0x1052 <malloc>
     1ba:	3c 01       	movw	r6, r24
     1bc:	88 24       	eor	r8, r8
     1be:	99 24       	eor	r9, r9
	//Create public keys
	for(int i = 0; i <= NUM_PROXIES; i++)
	{
		unsigned int seed = (unsigned int)processSystemIO();
     1c0:	0e 94 a5 01 	call	0x34a	; 0x34a <processSystemIO>
     1c4:	18 2f       	mov	r17, r24
		unsigned char *keys = (unsigned char*)malloc(sizeof(unsigned char)*6);
     1c6:	86 e0       	ldi	r24, 0x06	; 6
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 29 08 	call	0x1052	; 0x1052 <malloc>
		keys = rsaEncrypt(seed);
     1ce:	81 2f       	mov	r24, r17
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	0e 94 81 07 	call	0xf02	; 0xf02 <rsaEncrypt>
     1d6:	fc 01       	movw	r30, r24
		*(e_s + i) = (*(keys + 1) << 8) + *(keys + 0);
     1d8:	00 81       	ld	r16, Z
     1da:	d2 01       	movw	r26, r4
     1dc:	a8 0d       	add	r26, r8
     1de:	b9 1d       	adc	r27, r9
     1e0:	b1 80       	ldd	r11, Z+1	; 0x01
     1e2:	aa 24       	eor	r10, r10
     1e4:	c5 01       	movw	r24, r10
     1e6:	80 0f       	add	r24, r16
     1e8:	91 1d       	adc	r25, r1
     1ea:	8d 93       	st	X+, r24
     1ec:	9c 93       	st	X, r25
		*(d_s + i) = (*(keys + 3) << 8) + *(keys + 2);
     1ee:	d1 01       	movw	r26, r2
     1f0:	a8 0d       	add	r26, r8
     1f2:	b9 1d       	adc	r27, r9
     1f4:	d3 80       	ldd	r13, Z+3	; 0x03
     1f6:	cc 24       	eor	r12, r12
     1f8:	82 81       	ldd	r24, Z+2	; 0x02
     1fa:	96 01       	movw	r18, r12
     1fc:	28 0f       	add	r18, r24
     1fe:	31 1d       	adc	r19, r1
     200:	2d 93       	st	X+, r18
     202:	3c 93       	st	X, r19
		*(n_s + i) = (*(keys + 5) << 8) + *(keys + 4);
     204:	e4 80       	ldd	r14, Z+4	; 0x04
     206:	d3 01       	movw	r26, r6
     208:	a8 0d       	add	r26, r8
     20a:	b9 1d       	adc	r27, r9
     20c:	d5 81       	ldd	r29, Z+5	; 0x05
     20e:	c0 e0       	ldi	r28, 0x00	; 0
     210:	ce 01       	movw	r24, r28
     212:	8e 0d       	add	r24, r14
     214:	91 1d       	adc	r25, r1
     216:	8d 93       	st	X+, r24
     218:	9c 93       	st	X, r25
		//publish public keys
		unsigned int e = *(keys + 0);
		unsigned int n = *(keys + 4);
		sendPublicKey(RECEIVER_SIGNAL, proxySendPort, PROXY_SIGNAL, proxyReceivePort, e, n);
     21a:	8f ef       	ldi	r24, 0xFF	; 255
     21c:	6c e0       	ldi	r22, 0x0C	; 12
     21e:	4e ef       	ldi	r20, 0xFE	; 254
     220:	2d e0       	ldi	r18, 0x0D	; 13
     222:	10 e0       	ldi	r17, 0x00	; 0
     224:	ff 24       	eor	r15, r15
     226:	0e 94 c0 05 	call	0xb80	; 0xb80 <sendPublicKey>
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	88 0e       	add	r8, r24
     230:	99 1e       	adc	r9, r25
	_delay_ms(1000.0);
	unsigned int *d_s = (unsigned int*)malloc(sizeof(unsigned int)*(NUM_PROXIES+1));
	unsigned int *e_s = (unsigned int*)malloc(sizeof(unsigned int)*(NUM_PROXIES+1));
	unsigned int *n_s = (unsigned int*)malloc(sizeof(unsigned int)*(NUM_PROXIES+1));
	//Create public keys
	for(int i = 0; i <= NUM_PROXIES; i++)
     232:	94 e0       	ldi	r25, 0x04	; 4
     234:	89 16       	cp	r8, r25
     236:	91 04       	cpc	r9, r1
     238:	19 f6       	brne	.-122    	; 0x1c0 <performReceiver+0x66>
		unsigned int e = *(keys + 0);
		unsigned int n = *(keys + 4);
		sendPublicKey(RECEIVER_SIGNAL, proxySendPort, PROXY_SIGNAL, proxyReceivePort, e, n);
	}
	//wait for message
	display2CharsOn7SegBCD(RECEIVER_SIGNAL);
     23a:	8f ef       	ldi	r24, 0xFF	; 255
     23c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <display2CharsOn7SegBCD>

}
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	1f 91       	pop	r17
     246:	0f 91       	pop	r16
     248:	ff 90       	pop	r15
     24a:	ef 90       	pop	r14
     24c:	df 90       	pop	r13
     24e:	cf 90       	pop	r12
     250:	bf 90       	pop	r11
     252:	af 90       	pop	r10
     254:	9f 90       	pop	r9
     256:	8f 90       	pop	r8
     258:	7f 90       	pop	r7
     25a:	6f 90       	pop	r6
     25c:	5f 90       	pop	r5
     25e:	4f 90       	pop	r4
     260:	3f 90       	pop	r3
     262:	2f 90       	pop	r2
     264:	08 95       	ret

00000266 <performProxy>:

	return 0;
}

void performProxy()
{
     266:	cf 92       	push	r12
     268:	df 92       	push	r13
     26a:	ef 92       	push	r14
     26c:	ff 92       	push	r15
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
	unsigned char receiverSendPort = PORTE_ID;
	unsigned char receiverReceivePort = PORTB_ID;
	unsigned char senderSendPort = PORTC_ID;
	unsigned char senderReceivePort = PORTD_ID;
	sendCharToPort(receiverSendPort, PROXY_SIGNAL);
     276:	8e e0       	ldi	r24, 0x0E	; 14
     278:	6e ef       	ldi	r22, 0xFE	; 254
     27a:	0e 94 98 02 	call	0x530	; 0x530 <sendCharToPort>
     27e:	c0 e0       	ldi	r28, 0x00	; 0
     280:	d0 e0       	ldi	r29, 0x00	; 0
     282:	89 e1       	ldi	r24, 0x19	; 25
     284:	c8 2e       	mov	r12, r24
     286:	d1 2c       	mov	r13, r1
	unsigned int n = 0;
	//unsigned int *e_s = (unsigned int*)malloc(sizeof(unsigned int)*(NUM_PROXIES+1));
	//unsigned int *n_s = (unsigned int*)malloc(sizeof(unsigned int)*(NUM_PROXIES+1));
	for(int i = 0; i <= NUM_PROXIES; i++)
	{
		unsigned int *publicKey = (unsigned int*)malloc(sizeof(unsigned int)*2);
     288:	84 e0       	ldi	r24, 0x04	; 4
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 29 08 	call	0x1052	; 0x1052 <malloc>
		publicKey = receivePublicKey(RECEIVER_SIGNAL, receiverReceivePort, PROXY_SIGNAL, receiverSendPort);
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	6b e0       	ldi	r22, 0x0B	; 11
     294:	4e ef       	ldi	r20, 0xFE	; 254
     296:	2e e0       	ldi	r18, 0x0E	; 14
     298:	0e 94 18 06 	call	0xc30	; 0xc30 <receivePublicKey>
     29c:	fc 01       	movw	r30, r24
		if(i > 0)
     29e:	c1 30       	cpi	r28, 0x01	; 1
     2a0:	d1 05       	cpc	r29, r1
     2a2:	a1 f4       	brne	.+40     	; 0x2cc <performProxy+0x66>
		{
			unsigned int e_temp = (unsigned int)*(publicKey);
     2a4:	00 81       	ld	r16, Z
     2a6:	11 81       	ldd	r17, Z+1	; 0x01
			unsigned int n_temp = (unsigned int)*(publicKey + 1);
     2a8:	e2 80       	ldd	r14, Z+2	; 0x02
     2aa:	f3 80       	ldd	r15, Z+3	; 0x03
			display2CharsOn7SegBCD(PROXY_SIGNAL);
     2ac:	8e ef       	ldi	r24, 0xFE	; 254
     2ae:	0e 94 59 02 	call	0x4b2	; 0x4b2 <display2CharsOn7SegBCD>
     2b2:	80 e1       	ldi	r24, 0x10	; 16
     2b4:	97 e2       	ldi	r25, 0x27	; 39
     2b6:	f6 01       	movw	r30, r12
     2b8:	31 97       	sbiw	r30, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <performProxy+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2be:	d9 f7       	brne	.-10     	; 0x2b6 <performProxy+0x50>
			_delay_ms(1000.0);
			sendPublicKey(PROXY_SIGNAL, senderSendPort, SENDER_SIGNAL, senderReceivePort, e_temp, n_temp);
     2c0:	8e ef       	ldi	r24, 0xFE	; 254
     2c2:	6c e0       	ldi	r22, 0x0C	; 12
     2c4:	4d ef       	ldi	r20, 0xFD	; 253
     2c6:	2d e0       	ldi	r18, 0x0D	; 13
     2c8:	0e 94 c0 05 	call	0xb80	; 0xb80 <sendPublicKey>
	//receiver public keys
	unsigned int e = 0;
	unsigned int n = 0;
	//unsigned int *e_s = (unsigned int*)malloc(sizeof(unsigned int)*(NUM_PROXIES+1));
	//unsigned int *n_s = (unsigned int*)malloc(sizeof(unsigned int)*(NUM_PROXIES+1));
	for(int i = 0; i <= NUM_PROXIES; i++)
     2cc:	21 96       	adiw	r28, 0x01	; 1
     2ce:	c2 30       	cpi	r28, 0x02	; 2
     2d0:	d1 05       	cpc	r29, r1
     2d2:	d1 f6       	brne	.-76     	; 0x288 <performProxy+0x22>
		{
			e = (unsigned int)*(publicKey);
			n = (unsigned int)*(publicKey + 1);
		}
	}
	display2CharsOn7SegBCD(PROXY_SIGNAL);
     2d4:	8e ef       	ldi	r24, 0xFE	; 254
     2d6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <display2CharsOn7SegBCD>

}
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	1f 91       	pop	r17
     2e0:	0f 91       	pop	r16
     2e2:	ff 90       	pop	r15
     2e4:	ef 90       	pop	r14
     2e6:	df 90       	pop	r13
     2e8:	cf 90       	pop	r12
     2ea:	08 95       	ret

000002ec <main>:
		DDRD = 0x00; // PortD is input from proxy
		performReceiver();
	}
	else if(ROLE == PROXY)
	{
		DDRA = 0xFF; // PortA is LED 1 output
     2ec:	8f ef       	ldi	r24, 0xFF	; 255
     2ee:	81 b9       	out	0x01, r24	; 1
		DDRB = 0x00; // PortB is input from reciever
     2f0:	14 b8       	out	0x04, r1	; 4
		DDRE = 0xFF; // PortE is output to reciever
     2f2:	8d b9       	out	0x0d, r24	; 13
		DDRD = 0x00; // Port D input from sender
     2f4:	1a b8       	out	0x0a, r1	; 10
		DDRC = 0xFF; // Port C output to sender
     2f6:	87 b9       	out	0x07, r24	; 7
     2f8:	80 e1       	ldi	r24, 0x10	; 16
     2fa:	97 e2       	ldi	r25, 0x27	; 39
     2fc:	29 e1       	ldi	r18, 0x19	; 25
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	f9 01       	movw	r30, r18
     302:	31 97       	sbiw	r30, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <main+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     306:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     308:	d9 f7       	brne	.-10     	; 0x300 <main+0x14>
		_delay_ms(1000.0);
		performProxy();
     30a:	0e 94 33 01 	call	0x266	; 0x266 <performProxy>
		_delay_ms(1000.0);
		performSender();
	}

	return 0;
}
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	08 95       	ret

00000314 <getUserInput>:


unsigned char getUserInput()
{
	unsigned char input = 0;
	unsigned char pinEInput = (PINE & 0b00110000);
     314:	8c b1       	in	r24, 0x0c	; 12
     316:	80 73       	andi	r24, 0x30	; 48
	unsigned char pinBInput = (PINB & 0b11100000);
     318:	93 b1       	in	r25, 0x03	; 3
	if(pinEInput == 0x20)//down joystick pressed
     31a:	80 32       	cpi	r24, 0x20	; 32
     31c:	11 f4       	brne	.+4      	; 0x322 <getUserInput+0xe>
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	08 95       	ret
	{
		input = 2;
	}
	else if(pinEInput == 0x10)//right joystick pressed
     322:	80 31       	cpi	r24, 0x10	; 16
     324:	11 f4       	brne	.+4      	; 0x32a <getUserInput+0x16>
     326:	83 e0       	ldi	r24, 0x03	; 3
     328:	08 95       	ret

unsigned char getUserInput()
{
	unsigned char input = 0;
	unsigned char pinEInput = (PINE & 0b00110000);
	unsigned char pinBInput = (PINB & 0b11100000);
     32a:	89 2f       	mov	r24, r25
     32c:	80 7e       	andi	r24, 0xE0	; 224
	}
	else if(pinEInput == 0x10)//right joystick pressed
	{
		input = 3;
	}
	else if(pinBInput == 0x60)//up joystick pressed
     32e:	80 36       	cpi	r24, 0x60	; 96
     330:	11 f4       	brne	.+4      	; 0x336 <getUserInput+0x22>
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	08 95       	ret
	{
		input = 1;
	}
	else if(pinBInput == 0xA0)//left joystick pressed
     336:	80 3a       	cpi	r24, 0xA0	; 160
     338:	11 f4       	brne	.+4      	; 0x33e <getUserInput+0x2a>
     33a:	84 e0       	ldi	r24, 0x04	; 4
     33c:	08 95       	ret
	{
		input = 4;
	}
	else if(pinBInput == 0xC0)//select joystick pressed
     33e:	80 3c       	cpi	r24, 0xC0	; 192
     340:	11 f4       	brne	.+4      	; 0x346 <getUserInput+0x32>
     342:	85 e0       	ldi	r24, 0x05	; 5
     344:	08 95       	ret
     346:	80 e0       	ldi	r24, 0x00	; 0
	{
		input = 5;
	}
	return input;
}
     348:	08 95       	ret

0000034a <processSystemIO>:

unsigned char processSystemIO()
{
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	df 93       	push	r29
     350:	cf 93       	push	r28
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	60 97       	sbiw	r28, 0x10	; 16
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	60 e0       	ldi	r22, 0x00	; 0
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     366:	ae 01       	movw	r20, r28
     368:	4f 5f       	subi	r20, 0xFF	; 255
     36a:	5f 4f       	sbci	r21, 0xFF	; 255
     36c:	08 ea       	ldi	r16, 0xA8	; 168
     36e:	11 e6       	ldi	r17, 0x61	; 97
     370:	01 c0       	rjmp	.+2      	; 0x374 <processSystemIO+0x2a>
	}
	return input;
}

unsigned char processSystemIO()
{
     372:	63 2f       	mov	r22, r19


unsigned char getUserInput()
{
	unsigned char input = 0;
	unsigned char pinEInput = (PINE & 0b00110000);
     374:	8c b1       	in	r24, 0x0c	; 12
     376:	80 73       	andi	r24, 0x30	; 48
	unsigned char pinBInput = (PINB & 0b11100000);
     378:	93 b1       	in	r25, 0x03	; 3
	if(pinEInput == 0x20)//down joystick pressed
     37a:	80 32       	cpi	r24, 0x20	; 32
     37c:	11 f4       	brne	.+4      	; 0x382 <processSystemIO+0x38>
     37e:	32 e0       	ldi	r19, 0x02	; 2
     380:	13 c0       	rjmp	.+38     	; 0x3a8 <processSystemIO+0x5e>
	{
		input = 2;
	}
	else if(pinEInput == 0x10)//right joystick pressed
     382:	80 31       	cpi	r24, 0x10	; 16
     384:	11 f4       	brne	.+4      	; 0x38a <processSystemIO+0x40>
     386:	33 e0       	ldi	r19, 0x03	; 3
     388:	0f c0       	rjmp	.+30     	; 0x3a8 <processSystemIO+0x5e>

unsigned char getUserInput()
{
	unsigned char input = 0;
	unsigned char pinEInput = (PINE & 0b00110000);
	unsigned char pinBInput = (PINB & 0b11100000);
     38a:	89 2f       	mov	r24, r25
     38c:	80 7e       	andi	r24, 0xE0	; 224
	}
	else if(pinEInput == 0x10)//right joystick pressed
	{
		input = 3;
	}
	else if(pinBInput == 0x60)//up joystick pressed
     38e:	80 36       	cpi	r24, 0x60	; 96
     390:	11 f4       	brne	.+4      	; 0x396 <processSystemIO+0x4c>
     392:	31 e0       	ldi	r19, 0x01	; 1
     394:	09 c0       	rjmp	.+18     	; 0x3a8 <processSystemIO+0x5e>
	{
		input = 1;
	}
	else if(pinBInput == 0xA0)//left joystick pressed
     396:	80 3a       	cpi	r24, 0xA0	; 160
     398:	11 f4       	brne	.+4      	; 0x39e <processSystemIO+0x54>
     39a:	34 e0       	ldi	r19, 0x04	; 4
     39c:	05 c0       	rjmp	.+10     	; 0x3a8 <processSystemIO+0x5e>
	{
		input = 4;
	}
	else if(pinBInput == 0xC0)//select joystick pressed
     39e:	80 3c       	cpi	r24, 0xC0	; 192
     3a0:	11 f4       	brne	.+4      	; 0x3a6 <processSystemIO+0x5c>
     3a2:	35 e0       	ldi	r19, 0x05	; 5
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <processSystemIO+0x5e>
     3a6:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char prevInput = 0;
	unsigned char input = 0;
	while(1)
	{
		input = getUserInput();
		if(input != prevInput)
     3a8:	36 17       	cp	r19, r22
     3aa:	19 f3       	breq	.-58     	; 0x372 <processSystemIO+0x28>
		{
			//if left joystick pressed shift hexadecimal digits left
			if(input == 4)
     3ac:	34 30       	cpi	r19, 0x04	; 4
     3ae:	61 f4       	brne	.+24     	; 0x3c8 <processSystemIO+0x7e>
			{
				output = output << 4;
     3b0:	22 95       	swap	r18
     3b2:	20 7f       	andi	r18, 0xF0	; 240
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     3b4:	da 01       	movw	r26, r20
     3b6:	e0 e0       	ldi	r30, 0x00	; 0
     3b8:	f1 e0       	ldi	r31, 0x01	; 1
     3ba:	80 e1       	ldi	r24, 0x10	; 16
     3bc:	01 90       	ld	r0, Z+
     3be:	0d 92       	st	X+, r0
     3c0:	81 50       	subi	r24, 0x01	; 1
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <processSystemIO+0x72>
	unsigned char display0 = hexBCDArray[bits0];
     3c4:	99 81       	ldd	r25, Y+1	; 0x01
     3c6:	15 c0       	rjmp	.+42     	; 0x3f2 <processSystemIO+0xa8>
				output = output << 4;
				display2CharsOn7SegBCD(output);
				_delay_ms (100.0);
			}
			//if down joystick button pressed down decrement output
			else if(input == 3)
     3c8:	33 30       	cpi	r19, 0x03	; 3
     3ca:	11 f5       	brne	.+68     	; 0x410 <processSystemIO+0xc6>
			{
				if(output == 0)
     3cc:	22 23       	and	r18, r18
     3ce:	11 f4       	brne	.+4      	; 0x3d4 <processSystemIO+0x8a>
     3d0:	2f ef       	ldi	r18, 0xFF	; 255
     3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <processSystemIO+0x8c>
				{
					output = 255;
				}
				else
				{
					output--;
     3d4:	21 50       	subi	r18, 0x01	; 1
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     3d6:	da 01       	movw	r26, r20
     3d8:	e0 e0       	ldi	r30, 0x00	; 0
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	80 e1       	ldi	r24, 0x10	; 16
     3de:	01 90       	ld	r0, Z+
     3e0:	0d 92       	st	X+, r0
     3e2:	81 50       	subi	r24, 0x01	; 1
     3e4:	e1 f7       	brne	.-8      	; 0x3de <processSystemIO+0x94>
	unsigned char display0 = hexBCDArray[bits0];
     3e6:	82 2f       	mov	r24, r18
     3e8:	8f 70       	andi	r24, 0x0F	; 15
     3ea:	fa 01       	movw	r30, r20
     3ec:	e8 0f       	add	r30, r24
     3ee:	f1 1d       	adc	r31, r1
     3f0:	90 81       	ld	r25, Z
	unsigned char display1 = hexBCDArray[bits1];
     3f2:	82 2f       	mov	r24, r18
     3f4:	82 95       	swap	r24
     3f6:	8f 70       	andi	r24, 0x0F	; 15
     3f8:	fa 01       	movw	r30, r20
     3fa:	e8 0f       	add	r30, r24
     3fc:	f1 1d       	adc	r31, r1
     3fe:	80 81       	ld	r24, Z
	if(ROLE != SENDER)
	{
		display0 = ~display0;
     400:	90 95       	com	r25
		display1 = ~display1;
     402:	80 95       	com	r24
	}
	PORTA = display1;
     404:	82 b9       	out	0x02, r24	; 2
	PORTF = display0;
     406:	91 bb       	out	0x11, r25	; 17
     408:	c8 01       	movw	r24, r16
     40a:	01 97       	sbiw	r24, 0x01	; 1
     40c:	f1 f7       	brne	.-4      	; 0x40a <processSystemIO+0xc0>
     40e:	b1 cf       	rjmp	.-158    	; 0x372 <processSystemIO+0x28>
				}
				display2CharsOn7SegBCD(output);
				_delay_ms (100.0);
			}
			//if right joystick pressed shift hexadecimal digits right
			else if(input == 2)
     410:	32 30       	cpi	r19, 0x02	; 2
     412:	81 f4       	brne	.+32     	; 0x434 <processSystemIO+0xea>
			{
				output = output >> 4;
     414:	22 95       	swap	r18
     416:	2f 70       	andi	r18, 0x0F	; 15
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     418:	da 01       	movw	r26, r20
     41a:	e0 e0       	ldi	r30, 0x00	; 0
     41c:	f1 e0       	ldi	r31, 0x01	; 1
     41e:	80 e1       	ldi	r24, 0x10	; 16
     420:	01 90       	ld	r0, Z+
     422:	0d 92       	st	X+, r0
     424:	81 50       	subi	r24, 0x01	; 1
     426:	e1 f7       	brne	.-8      	; 0x420 <processSystemIO+0xd6>
	unsigned char display0 = hexBCDArray[bits0];
     428:	fa 01       	movw	r30, r20
     42a:	e2 0f       	add	r30, r18
     42c:	f1 1d       	adc	r31, r1
     42e:	90 81       	ld	r25, Z
	unsigned char display1 = hexBCDArray[bits1];
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	e6 cf       	rjmp	.-52     	; 0x400 <processSystemIO+0xb6>
				output = output >> 4;
				display2CharsOn7SegBCD(output);
				_delay_ms (100.0);
			}
			//if up joystick button pressed up increment output
			else if(input == 1)
     434:	31 30       	cpi	r19, 0x01	; 1
     436:	51 f4       	brne	.+20     	; 0x44c <processSystemIO+0x102>
			{
				output++;
     438:	2f 5f       	subi	r18, 0xFF	; 255
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     43a:	da 01       	movw	r26, r20
     43c:	e0 e0       	ldi	r30, 0x00	; 0
     43e:	f1 e0       	ldi	r31, 0x01	; 1
     440:	80 e1       	ldi	r24, 0x10	; 16
     442:	01 90       	ld	r0, Z+
     444:	0d 92       	st	X+, r0
     446:	81 50       	subi	r24, 0x01	; 1
     448:	e1 f7       	brne	.-8      	; 0x442 <processSystemIO+0xf8>
     44a:	cd cf       	rjmp	.-102    	; 0x3e6 <processSystemIO+0x9c>
				}
				display2CharsOn7SegBCD(output);
				_delay_ms (100.0);
			}
			//if select button pressed reset output = 0
			if(input == 5)
     44c:	35 30       	cpi	r19, 0x05	; 5
     44e:	09 f0       	breq	.+2      	; 0x452 <processSystemIO+0x108>
     450:	90 cf       	rjmp	.-224    	; 0x372 <processSystemIO+0x28>
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     452:	de 01       	movw	r26, r28
     454:	11 96       	adiw	r26, 0x01	; 1
     456:	e0 e0       	ldi	r30, 0x00	; 0
     458:	f1 e0       	ldi	r31, 0x01	; 1
     45a:	80 e1       	ldi	r24, 0x10	; 16
     45c:	01 90       	ld	r0, Z+
     45e:	0d 92       	st	X+, r0
     460:	81 50       	subi	r24, 0x01	; 1
     462:	e1 f7       	brne	.-8      	; 0x45c <processSystemIO+0x112>
	unsigned char display0 = hexBCDArray[bits0];
     464:	82 2f       	mov	r24, r18
     466:	8f 70       	andi	r24, 0x0F	; 15
     468:	fe 01       	movw	r30, r28
     46a:	31 96       	adiw	r30, 0x01	; 1
     46c:	df 01       	movw	r26, r30
     46e:	a8 0f       	add	r26, r24
     470:	b1 1d       	adc	r27, r1
     472:	9c 91       	ld	r25, X
	unsigned char display1 = hexBCDArray[bits1];
     474:	82 2f       	mov	r24, r18
     476:	82 95       	swap	r24
     478:	8f 70       	andi	r24, 0x0F	; 15
     47a:	e8 0f       	add	r30, r24
     47c:	f1 1d       	adc	r31, r1
     47e:	80 81       	ld	r24, Z
	if(ROLE != SENDER)
	{
		display0 = ~display0;
     480:	90 95       	com	r25
		display1 = ~display1;
     482:	80 95       	com	r24
	}
	PORTA = display1;
     484:	82 b9       	out	0x02, r24	; 2
	PORTF = display0;
     486:	91 bb       	out	0x11, r25	; 17
     488:	88 ea       	ldi	r24, 0xA8	; 168
     48a:	91 e6       	ldi	r25, 0x61	; 97
     48c:	fc 01       	movw	r30, r24
     48e:	31 97       	sbiw	r30, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <processSystemIO+0x144>
}

void turnOffDisplay()
{
	PORTA = 0x00;
     492:	12 b8       	out	0x02, r1	; 2
	PORTF = 0x00;
     494:	11 ba       	out	0x11, r1	; 17
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	f1 f7       	brne	.-4      	; 0x496 <processSystemIO+0x14c>
		prevInput = input;
	}
	turnOffDisplay();
	_delay_ms (100.0);
	return output;
}
     49a:	82 2f       	mov	r24, r18
     49c:	60 96       	adiw	r28, 0x10	; 16
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	cf 91       	pop	r28
     4aa:	df 91       	pop	r29
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	08 95       	ret

000004b2 <display2CharsOn7SegBCD>:

void display2CharsOn7SegBCD(unsigned char bcd)
{
     4b2:	df 93       	push	r29
     4b4:	cf 93       	push	r28
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
     4ba:	60 97       	sbiw	r28, 0x10	; 16
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	f8 94       	cli
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	cd bf       	out	0x3d, r28	; 61
     4c6:	28 2f       	mov	r18, r24
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     4c8:	de 01       	movw	r26, r28
     4ca:	11 96       	adiw	r26, 0x01	; 1
     4cc:	e0 e0       	ldi	r30, 0x00	; 0
     4ce:	f1 e0       	ldi	r31, 0x01	; 1
     4d0:	80 e1       	ldi	r24, 0x10	; 16
     4d2:	01 90       	ld	r0, Z+
     4d4:	0d 92       	st	X+, r0
     4d6:	81 50       	subi	r24, 0x01	; 1
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <display2CharsOn7SegBCD+0x20>
	unsigned char display0 = hexBCDArray[bits0];
     4da:	82 2f       	mov	r24, r18
     4dc:	8f 70       	andi	r24, 0x0F	; 15
     4de:	fe 01       	movw	r30, r28
     4e0:	31 96       	adiw	r30, 0x01	; 1
     4e2:	df 01       	movw	r26, r30
     4e4:	a8 0f       	add	r26, r24
     4e6:	b1 1d       	adc	r27, r1
     4e8:	9c 91       	ld	r25, X
	unsigned char display1 = hexBCDArray[bits1];
     4ea:	22 95       	swap	r18
     4ec:	2f 70       	andi	r18, 0x0F	; 15
     4ee:	e2 0f       	add	r30, r18
     4f0:	f1 1d       	adc	r31, r1
     4f2:	80 81       	ld	r24, Z
	if(ROLE != SENDER)
	{
		display0 = ~display0;
     4f4:	90 95       	com	r25
		display1 = ~display1;
     4f6:	80 95       	com	r24
	}
	PORTA = display1;
     4f8:	82 b9       	out	0x02, r24	; 2
	PORTF = display0;
     4fa:	91 bb       	out	0x11, r25	; 17
}
     4fc:	60 96       	adiw	r28, 0x10	; 16
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	cf 91       	pop	r28
     50a:	df 91       	pop	r29
     50c:	08 95       	ret

0000050e <turnOffDisplay>:

void turnOffDisplay()
{
	PORTA = 0x00;
     50e:	12 b8       	out	0x02, r1	; 2
	PORTF = 0x00;
     510:	11 ba       	out	0x11, r1	; 17
}
     512:	08 95       	ret

00000514 <getRoleSignal>:

unsigned char getRoleSignal(unsigned char role)
{
	unsigned char signal = 0x00;
	if(role == RECEIVER)
     514:	82 30       	cpi	r24, 0x02	; 2
     516:	11 f4       	brne	.+4      	; 0x51c <getRoleSignal+0x8>
     518:	8f ef       	ldi	r24, 0xFF	; 255
     51a:	08 95       	ret
	{
		signal = RECEIVER_SIGNAL;
	} 
	else if(role == PROXY)
     51c:	81 30       	cpi	r24, 0x01	; 1
     51e:	11 f4       	brne	.+4      	; 0x524 <getRoleSignal+0x10>
     520:	8e ef       	ldi	r24, 0xFE	; 254
     522:	08 95       	ret
	{
		signal = PROXY_SIGNAL;
	}
	else if(role == SENDER)
     524:	88 23       	and	r24, r24
     526:	11 f4       	brne	.+4      	; 0x52c <getRoleSignal+0x18>
     528:	8d ef       	ldi	r24, 0xFD	; 253
     52a:	08 95       	ret
     52c:	80 e0       	ldi	r24, 0x00	; 0
	{
		signal = SENDER_SIGNAL;
	}
	return signal;
}
     52e:	08 95       	ret

00000530 <sendCharToPort>:

void sendCharToPort(unsigned char port, unsigned char message)
{
	switch (port) 
     530:	8c 30       	cpi	r24, 0x0C	; 12
     532:	91 f0       	breq	.+36     	; 0x558 <sendCharToPort+0x28>
     534:	8d 30       	cpi	r24, 0x0D	; 13
     536:	28 f4       	brcc	.+10     	; 0x542 <sendCharToPort+0x12>
     538:	8a 30       	cpi	r24, 0x0A	; 10
     53a:	51 f0       	breq	.+20     	; 0x550 <sendCharToPort+0x20>
     53c:	8b 30       	cpi	r24, 0x0B	; 11
     53e:	99 f4       	brne	.+38     	; 0x566 <sendCharToPort+0x36>
     540:	09 c0       	rjmp	.+18     	; 0x554 <sendCharToPort+0x24>
     542:	8e 30       	cpi	r24, 0x0E	; 14
     544:	69 f0       	breq	.+26     	; 0x560 <sendCharToPort+0x30>
     546:	8e 30       	cpi	r24, 0x0E	; 14
     548:	48 f0       	brcs	.+18     	; 0x55c <sendCharToPort+0x2c>
     54a:	8f 30       	cpi	r24, 0x0F	; 15
     54c:	61 f4       	brne	.+24     	; 0x566 <sendCharToPort+0x36>
     54e:	0a c0       	rjmp	.+20     	; 0x564 <sendCharToPort+0x34>
	{
		case PORTA_ID:
			PORTA = message;
     550:	62 b9       	out	0x02, r22	; 2
     552:	08 95       	ret
			break;
		case PORTB_ID:
			PORTB = message;
     554:	65 b9       	out	0x05, r22	; 5
     556:	08 95       	ret
			break;
		case PORTC_ID:
			PORTC = message;
     558:	68 b9       	out	0x08, r22	; 8
     55a:	08 95       	ret
			break;
		case PORTD_ID:
			PORTD = message;
     55c:	6b b9       	out	0x0b, r22	; 11
     55e:	08 95       	ret
			break;
		case PORTE_ID:
			PORTE = message;
     560:	6e b9       	out	0x0e, r22	; 14
     562:	08 95       	ret
			break;
		case PORTF_ID:
			PORTF = message;
     564:	61 bb       	out	0x11, r22	; 17
     566:	08 95       	ret

00000568 <getCharFromPort>:
}

unsigned char getCharFromPort(unsigned char port)
{
	unsigned char receivedChar = 0x00;
	switch(port)
     568:	8c 30       	cpi	r24, 0x0C	; 12
     56a:	99 f0       	breq	.+38     	; 0x592 <getCharFromPort+0x2a>
     56c:	8d 30       	cpi	r24, 0x0D	; 13
     56e:	28 f4       	brcc	.+10     	; 0x57a <getCharFromPort+0x12>
     570:	8a 30       	cpi	r24, 0x0A	; 10
     572:	59 f0       	breq	.+22     	; 0x58a <getCharFromPort+0x22>
     574:	8b 30       	cpi	r24, 0x0B	; 11
     576:	39 f4       	brne	.+14     	; 0x586 <getCharFromPort+0x1e>
     578:	0a c0       	rjmp	.+20     	; 0x58e <getCharFromPort+0x26>
     57a:	8e 30       	cpi	r24, 0x0E	; 14
     57c:	71 f0       	breq	.+28     	; 0x59a <getCharFromPort+0x32>
     57e:	8e 30       	cpi	r24, 0x0E	; 14
     580:	50 f0       	brcs	.+20     	; 0x596 <getCharFromPort+0x2e>
     582:	8f 30       	cpi	r24, 0x0F	; 15
     584:	61 f0       	breq	.+24     	; 0x59e <getCharFromPort+0x36>
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	08 95       	ret
	{
		case PORTA_ID:
			receivedChar = PINA;
     58a:	80 b1       	in	r24, 0x00	; 0
     58c:	08 95       	ret
			break;
		case PORTB_ID:
			receivedChar = PINB;
     58e:	83 b1       	in	r24, 0x03	; 3
     590:	08 95       	ret
			break;
		case PORTC_ID:
			receivedChar = PINC;
     592:	86 b1       	in	r24, 0x06	; 6
     594:	08 95       	ret
			break;
		case PORTD_ID:
			receivedChar = PIND;
     596:	89 b1       	in	r24, 0x09	; 9
     598:	08 95       	ret
			break;
		case PORTE_ID:
			receivedChar = PINE;
     59a:	8c b1       	in	r24, 0x0c	; 12
     59c:	08 95       	ret
			break;
		case PORTF_ID:
			receivedChar = PINF;
     59e:	8f b1       	in	r24, 0x0f	; 15
			break;
	}
	return receivedChar;
}
     5a0:	08 95       	ret

000005a2 <waitForSignalCharFromPort>:

unsigned char waitForSignalCharFromPort(unsigned char signal, unsigned char port, unsigned char getNonSignalChar)
{
     5a2:	cf 92       	push	r12
     5a4:	df 92       	push	r13
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	df 93       	push	r29
     5b0:	cf 93       	push	r28
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
     5b6:	60 97       	sbiw	r28, 0x10	; 16
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	e8 2e       	mov	r14, r24
     5c4:	f6 2e       	mov	r15, r22
     5c6:	14 2f       	mov	r17, r20
	unsigned char currentChar = getCharFromPort(port);
     5c8:	86 2f       	mov	r24, r22
     5ca:	0e 94 b4 02 	call	0x568	; 0x568 <getCharFromPort>
     5ce:	28 2f       	mov	r18, r24
	if(getNonSignalChar == 1)
     5d0:	11 30       	cpi	r17, 0x01	; 1
     5d2:	09 f0       	breq	.+2      	; 0x5d6 <waitForSignalCharFromPort+0x34>
     5d4:	4d c0       	rjmp	.+154    	; 0x670 <waitForSignalCharFromPort+0xce>
     5d6:	21 c0       	rjmp	.+66     	; 0x61a <waitForSignalCharFromPort+0x78>
     5d8:	c6 01       	movw	r24, r12
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	f1 f7       	brne	.-4      	; 0x5da <waitForSignalCharFromPort+0x38>
	{
		while(currentChar == signal)
		{
			_delay_ms(10.0);
			currentChar = getCharFromPort(port);
     5de:	8f 2d       	mov	r24, r15
     5e0:	0e 94 b4 02 	call	0x568	; 0x568 <getCharFromPort>
     5e4:	28 2f       	mov	r18, r24
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     5e6:	d8 01       	movw	r26, r16
     5e8:	e0 e0       	ldi	r30, 0x00	; 0
     5ea:	f1 e0       	ldi	r31, 0x01	; 1
     5ec:	80 e1       	ldi	r24, 0x10	; 16
     5ee:	01 90       	ld	r0, Z+
     5f0:	0d 92       	st	X+, r0
     5f2:	81 50       	subi	r24, 0x01	; 1
     5f4:	e1 f7       	brne	.-8      	; 0x5ee <waitForSignalCharFromPort+0x4c>
	unsigned char display0 = hexBCDArray[bits0];
     5f6:	82 2f       	mov	r24, r18
     5f8:	8f 70       	andi	r24, 0x0F	; 15
     5fa:	f8 01       	movw	r30, r16
     5fc:	e8 0f       	add	r30, r24
     5fe:	f1 1d       	adc	r31, r1
     600:	90 81       	ld	r25, Z
	unsigned char display1 = hexBCDArray[bits1];
     602:	82 2f       	mov	r24, r18
     604:	82 95       	swap	r24
     606:	8f 70       	andi	r24, 0x0F	; 15
     608:	f8 01       	movw	r30, r16
     60a:	e8 0f       	add	r30, r24
     60c:	f1 1d       	adc	r31, r1
     60e:	80 81       	ld	r24, Z
	if(ROLE != SENDER)
	{
		display0 = ~display0;
     610:	90 95       	com	r25
		display1 = ~display1;
     612:	80 95       	com	r24
	}
	PORTA = display1;
     614:	82 b9       	out	0x02, r24	; 2
	PORTF = display0;
     616:	91 bb       	out	0x11, r25	; 17
     618:	07 c0       	rjmp	.+14     	; 0x628 <waitForSignalCharFromPort+0x86>
     61a:	94 ec       	ldi	r25, 0xC4	; 196
     61c:	c9 2e       	mov	r12, r25
     61e:	99 e0       	ldi	r25, 0x09	; 9
     620:	d9 2e       	mov	r13, r25
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     622:	8e 01       	movw	r16, r28
     624:	0f 5f       	subi	r16, 0xFF	; 255
     626:	1f 4f       	sbci	r17, 0xFF	; 255
unsigned char waitForSignalCharFromPort(unsigned char signal, unsigned char port, unsigned char getNonSignalChar)
{
	unsigned char currentChar = getCharFromPort(port);
	if(getNonSignalChar == 1)
	{
		while(currentChar == signal)
     628:	2e 15       	cp	r18, r14
     62a:	b1 f2       	breq	.-84     	; 0x5d8 <waitForSignalCharFromPort+0x36>
     62c:	2a c0       	rjmp	.+84     	; 0x682 <waitForSignalCharFromPort+0xe0>
     62e:	c6 01       	movw	r24, r12
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <waitForSignalCharFromPort+0x8e>
	else
	{
		while(currentChar != signal)
		{
			_delay_ms(10.0);
			currentChar = getCharFromPort(port);
     634:	8f 2d       	mov	r24, r15
     636:	0e 94 b4 02 	call	0x568	; 0x568 <getCharFromPort>
     63a:	28 2f       	mov	r18, r24
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     63c:	d8 01       	movw	r26, r16
     63e:	e0 e0       	ldi	r30, 0x00	; 0
     640:	f1 e0       	ldi	r31, 0x01	; 1
     642:	80 e1       	ldi	r24, 0x10	; 16
     644:	01 90       	ld	r0, Z+
     646:	0d 92       	st	X+, r0
     648:	81 50       	subi	r24, 0x01	; 1
     64a:	e1 f7       	brne	.-8      	; 0x644 <waitForSignalCharFromPort+0xa2>
	unsigned char display0 = hexBCDArray[bits0];
     64c:	82 2f       	mov	r24, r18
     64e:	8f 70       	andi	r24, 0x0F	; 15
     650:	f8 01       	movw	r30, r16
     652:	e8 0f       	add	r30, r24
     654:	f1 1d       	adc	r31, r1
     656:	90 81       	ld	r25, Z
	unsigned char display1 = hexBCDArray[bits1];
     658:	82 2f       	mov	r24, r18
     65a:	82 95       	swap	r24
     65c:	8f 70       	andi	r24, 0x0F	; 15
     65e:	f8 01       	movw	r30, r16
     660:	e8 0f       	add	r30, r24
     662:	f1 1d       	adc	r31, r1
     664:	80 81       	ld	r24, Z
	if(ROLE != SENDER)
	{
		display0 = ~display0;
     666:	90 95       	com	r25
		display1 = ~display1;
     668:	80 95       	com	r24
	}
	PORTA = display1;
     66a:	82 b9       	out	0x02, r24	; 2
	PORTF = display0;
     66c:	91 bb       	out	0x11, r25	; 17
     66e:	07 c0       	rjmp	.+14     	; 0x67e <waitForSignalCharFromPort+0xdc>
     670:	84 ec       	ldi	r24, 0xC4	; 196
     672:	c8 2e       	mov	r12, r24
     674:	89 e0       	ldi	r24, 0x09	; 9
     676:	d8 2e       	mov	r13, r24
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     678:	8e 01       	movw	r16, r28
     67a:	0f 5f       	subi	r16, 0xFF	; 255
     67c:	1f 4f       	sbci	r17, 0xFF	; 255
			display2CharsOn7SegBCD(currentChar);
		}
	}
	else
	{
		while(currentChar != signal)
     67e:	2e 15       	cp	r18, r14
     680:	b1 f6       	brne	.-84     	; 0x62e <waitForSignalCharFromPort+0x8c>
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     682:	de 01       	movw	r26, r28
     684:	11 96       	adiw	r26, 0x01	; 1
     686:	e0 e0       	ldi	r30, 0x00	; 0
     688:	f1 e0       	ldi	r31, 0x01	; 1
     68a:	80 e1       	ldi	r24, 0x10	; 16
     68c:	01 90       	ld	r0, Z+
     68e:	0d 92       	st	X+, r0
     690:	81 50       	subi	r24, 0x01	; 1
     692:	e1 f7       	brne	.-8      	; 0x68c <waitForSignalCharFromPort+0xea>
	unsigned char display0 = hexBCDArray[bits0];
     694:	82 2f       	mov	r24, r18
     696:	8f 70       	andi	r24, 0x0F	; 15
     698:	fe 01       	movw	r30, r28
     69a:	31 96       	adiw	r30, 0x01	; 1
     69c:	df 01       	movw	r26, r30
     69e:	a8 0f       	add	r26, r24
     6a0:	b1 1d       	adc	r27, r1
     6a2:	9c 91       	ld	r25, X
	unsigned char display1 = hexBCDArray[bits1];
     6a4:	82 2f       	mov	r24, r18
     6a6:	82 95       	swap	r24
     6a8:	8f 70       	andi	r24, 0x0F	; 15
     6aa:	e8 0f       	add	r30, r24
     6ac:	f1 1d       	adc	r31, r1
     6ae:	80 81       	ld	r24, Z
	if(ROLE != SENDER)
	{
		display0 = ~display0;
     6b0:	90 95       	com	r25
		display1 = ~display1;
     6b2:	80 95       	com	r24
	}
	PORTA = display1;
     6b4:	82 b9       	out	0x02, r24	; 2
	PORTF = display0;
     6b6:	91 bb       	out	0x11, r25	; 17
			display2CharsOn7SegBCD(currentChar);
		}
	}
	display2CharsOn7SegBCD(currentChar);
	return currentChar;
}
     6b8:	82 2f       	mov	r24, r18
     6ba:	60 96       	adiw	r28, 0x10	; 16
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	cf 91       	pop	r28
     6c8:	df 91       	pop	r29
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	ff 90       	pop	r15
     6d0:	ef 90       	pop	r14
     6d2:	df 90       	pop	r13
     6d4:	cf 90       	pop	r12
     6d6:	08 95       	ret

000006d8 <waitForSignalFromPort>:

unsigned char waitForSignalFromPort(unsigned char signal, unsigned char port)
{
     6d8:	cf 92       	push	r12
     6da:	df 92       	push	r13
     6dc:	ef 92       	push	r14
     6de:	ff 92       	push	r15
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	df 93       	push	r29
     6e6:	cf 93       	push	r28
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	60 97       	sbiw	r28, 0x10	; 16
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	cd bf       	out	0x3d, r28	; 61
     6f8:	f8 2e       	mov	r15, r24
     6fa:	e6 2e       	mov	r14, r22
	unsigned char currentChar = getCharFromPort(port);
     6fc:	86 2f       	mov	r24, r22
     6fe:	0e 94 b4 02 	call	0x568	; 0x568 <getCharFromPort>
     702:	28 2f       	mov	r18, r24
     704:	8e 01       	movw	r16, r28
     706:	0f 5f       	subi	r16, 0xFF	; 255
     708:	1f 4f       	sbci	r17, 0xFF	; 255
     70a:	34 ec       	ldi	r19, 0xC4	; 196
     70c:	c3 2e       	mov	r12, r19
     70e:	39 e0       	ldi	r19, 0x09	; 9
     710:	d3 2e       	mov	r13, r19
     712:	20 c0       	rjmp	.+64     	; 0x754 <waitForSignalFromPort+0x7c>
     714:	c6 01       	movw	r24, r12
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <waitForSignalFromPort+0x3e>
	while(currentChar != signal)
	{
		_delay_ms(10.0);
		currentChar = getCharFromPort(port);
     71a:	8e 2d       	mov	r24, r14
     71c:	0e 94 b4 02 	call	0x568	; 0x568 <getCharFromPort>
     720:	28 2f       	mov	r18, r24
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     722:	d8 01       	movw	r26, r16
     724:	e0 e0       	ldi	r30, 0x00	; 0
     726:	f1 e0       	ldi	r31, 0x01	; 1
     728:	80 e1       	ldi	r24, 0x10	; 16
     72a:	01 90       	ld	r0, Z+
     72c:	0d 92       	st	X+, r0
     72e:	81 50       	subi	r24, 0x01	; 1
     730:	e1 f7       	brne	.-8      	; 0x72a <waitForSignalFromPort+0x52>
	unsigned char display0 = hexBCDArray[bits0];
     732:	82 2f       	mov	r24, r18
     734:	8f 70       	andi	r24, 0x0F	; 15
     736:	f8 01       	movw	r30, r16
     738:	e8 0f       	add	r30, r24
     73a:	f1 1d       	adc	r31, r1
     73c:	90 81       	ld	r25, Z
	unsigned char display1 = hexBCDArray[bits1];
     73e:	82 2f       	mov	r24, r18
     740:	82 95       	swap	r24
     742:	8f 70       	andi	r24, 0x0F	; 15
     744:	f8 01       	movw	r30, r16
     746:	e8 0f       	add	r30, r24
     748:	f1 1d       	adc	r31, r1
     74a:	80 81       	ld	r24, Z
	if(ROLE != SENDER)
	{
		display0 = ~display0;
     74c:	90 95       	com	r25
		display1 = ~display1;
     74e:	80 95       	com	r24
	}
	PORTA = display1;
     750:	82 b9       	out	0x02, r24	; 2
	PORTF = display0;
     752:	91 bb       	out	0x11, r25	; 17
}

unsigned char waitForSignalFromPort(unsigned char signal, unsigned char port)
{
	unsigned char currentChar = getCharFromPort(port);
	while(currentChar != signal)
     754:	2f 15       	cp	r18, r15
     756:	f1 f6       	brne	.-68     	; 0x714 <waitForSignalFromPort+0x3c>
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     758:	d8 01       	movw	r26, r16
     75a:	e0 e0       	ldi	r30, 0x00	; 0
     75c:	f1 e0       	ldi	r31, 0x01	; 1
     75e:	80 e1       	ldi	r24, 0x10	; 16
     760:	01 90       	ld	r0, Z+
     762:	0d 92       	st	X+, r0
     764:	81 50       	subi	r24, 0x01	; 1
     766:	e1 f7       	brne	.-8      	; 0x760 <waitForSignalFromPort+0x88>
	unsigned char display0 = hexBCDArray[bits0];
     768:	8f 2d       	mov	r24, r15
     76a:	8f 70       	andi	r24, 0x0F	; 15
     76c:	fe 01       	movw	r30, r28
     76e:	31 96       	adiw	r30, 0x01	; 1
     770:	df 01       	movw	r26, r30
     772:	a8 0f       	add	r26, r24
     774:	b1 1d       	adc	r27, r1
     776:	9c 91       	ld	r25, X
	unsigned char display1 = hexBCDArray[bits1];
     778:	8f 2d       	mov	r24, r15
     77a:	82 95       	swap	r24
     77c:	8f 70       	andi	r24, 0x0F	; 15
     77e:	e8 0f       	add	r30, r24
     780:	f1 1d       	adc	r31, r1
     782:	80 81       	ld	r24, Z
	if(ROLE != SENDER)
	{
		display0 = ~display0;
     784:	90 95       	com	r25
		display1 = ~display1;
     786:	80 95       	com	r24
	}
	PORTA = display1;
     788:	82 b9       	out	0x02, r24	; 2
	PORTF = display0;
     78a:	91 bb       	out	0x11, r25	; 17
		currentChar = getCharFromPort(port);
		display2CharsOn7SegBCD(currentChar);
	}
	display2CharsOn7SegBCD(currentChar);
	return currentChar;
}
     78c:	8f 2d       	mov	r24, r15
     78e:	60 96       	adiw	r28, 0x10	; 16
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	cf 91       	pop	r28
     79c:	df 91       	pop	r29
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	df 90       	pop	r13
     7a8:	cf 90       	pop	r12
     7aa:	08 95       	ret

000007ac <waitForPublicKeyCharFromPort>:

unsigned char waitForPublicKeyCharFromPort(unsigned char signal, unsigned char port)
{
     7ac:	cf 92       	push	r12
     7ae:	df 92       	push	r13
     7b0:	ef 92       	push	r14
     7b2:	ff 92       	push	r15
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	df 93       	push	r29
     7ba:	cf 93       	push	r28
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
     7c0:	60 97       	sbiw	r28, 0x10	; 16
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	cd bf       	out	0x3d, r28	; 61
     7cc:	e8 2e       	mov	r14, r24
     7ce:	f6 2e       	mov	r15, r22
	unsigned char currentChar = getCharFromPort(port);
     7d0:	86 2f       	mov	r24, r22
     7d2:	0e 94 b4 02 	call	0x568	; 0x568 <getCharFromPort>
     7d6:	28 2f       	mov	r18, r24
     7d8:	8e 01       	movw	r16, r28
     7da:	0f 5f       	subi	r16, 0xFF	; 255
     7dc:	1f 4f       	sbci	r17, 0xFF	; 255
     7de:	44 ec       	ldi	r20, 0xC4	; 196
     7e0:	c4 2e       	mov	r12, r20
     7e2:	49 e0       	ldi	r20, 0x09	; 9
     7e4:	d4 2e       	mov	r13, r20
     7e6:	20 c0       	rjmp	.+64     	; 0x828 <waitForPublicKeyCharFromPort+0x7c>
     7e8:	c6 01       	movw	r24, r12
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <waitForPublicKeyCharFromPort+0x3e>
	while(currentChar == signal)
	{
		_delay_ms(10.0);
		currentChar = getCharFromPort(port);
     7ee:	8f 2d       	mov	r24, r15
     7f0:	0e 94 b4 02 	call	0x568	; 0x568 <getCharFromPort>
     7f4:	28 2f       	mov	r18, r24
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     7f6:	d8 01       	movw	r26, r16
     7f8:	e0 e0       	ldi	r30, 0x00	; 0
     7fa:	f1 e0       	ldi	r31, 0x01	; 1
     7fc:	80 e1       	ldi	r24, 0x10	; 16
     7fe:	01 90       	ld	r0, Z+
     800:	0d 92       	st	X+, r0
     802:	81 50       	subi	r24, 0x01	; 1
     804:	e1 f7       	brne	.-8      	; 0x7fe <waitForPublicKeyCharFromPort+0x52>
	unsigned char display0 = hexBCDArray[bits0];
     806:	82 2f       	mov	r24, r18
     808:	8f 70       	andi	r24, 0x0F	; 15
     80a:	f8 01       	movw	r30, r16
     80c:	e8 0f       	add	r30, r24
     80e:	f1 1d       	adc	r31, r1
     810:	90 81       	ld	r25, Z
	unsigned char display1 = hexBCDArray[bits1];
     812:	82 2f       	mov	r24, r18
     814:	82 95       	swap	r24
     816:	8f 70       	andi	r24, 0x0F	; 15
     818:	f8 01       	movw	r30, r16
     81a:	e8 0f       	add	r30, r24
     81c:	f1 1d       	adc	r31, r1
     81e:	80 81       	ld	r24, Z
	if(ROLE != SENDER)
	{
		display0 = ~display0;
     820:	90 95       	com	r25
		display1 = ~display1;
     822:	80 95       	com	r24
	}
	PORTA = display1;
     824:	82 b9       	out	0x02, r24	; 2
	PORTF = display0;
     826:	91 bb       	out	0x11, r25	; 17
}

unsigned char waitForPublicKeyCharFromPort(unsigned char signal, unsigned char port)
{
	unsigned char currentChar = getCharFromPort(port);
	while(currentChar == signal)
     828:	2e 15       	cp	r18, r14
     82a:	f1 f2       	breq	.-68     	; 0x7e8 <waitForPublicKeyCharFromPort+0x3c>
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     82c:	d8 01       	movw	r26, r16
     82e:	e0 e0       	ldi	r30, 0x00	; 0
     830:	f1 e0       	ldi	r31, 0x01	; 1
     832:	80 e1       	ldi	r24, 0x10	; 16
     834:	01 90       	ld	r0, Z+
     836:	0d 92       	st	X+, r0
     838:	81 50       	subi	r24, 0x01	; 1
     83a:	e1 f7       	brne	.-8      	; 0x834 <waitForPublicKeyCharFromPort+0x88>
	unsigned char display0 = hexBCDArray[bits0];
     83c:	82 2f       	mov	r24, r18
     83e:	8f 70       	andi	r24, 0x0F	; 15
     840:	fe 01       	movw	r30, r28
     842:	31 96       	adiw	r30, 0x01	; 1
     844:	df 01       	movw	r26, r30
     846:	a8 0f       	add	r26, r24
     848:	b1 1d       	adc	r27, r1
     84a:	9c 91       	ld	r25, X
	unsigned char display1 = hexBCDArray[bits1];
     84c:	82 2f       	mov	r24, r18
     84e:	82 95       	swap	r24
     850:	8f 70       	andi	r24, 0x0F	; 15
     852:	e8 0f       	add	r30, r24
     854:	f1 1d       	adc	r31, r1
     856:	80 81       	ld	r24, Z
	if(ROLE != SENDER)
	{
		display0 = ~display0;
     858:	90 95       	com	r25
		display1 = ~display1;
     85a:	80 95       	com	r24
	}
	PORTA = display1;
     85c:	82 b9       	out	0x02, r24	; 2
	PORTF = display0;
     85e:	91 bb       	out	0x11, r25	; 17
		currentChar = getCharFromPort(port);
		display2CharsOn7SegBCD(currentChar);
	}
	display2CharsOn7SegBCD(currentChar);
	return currentChar;
}
     860:	82 2f       	mov	r24, r18
     862:	60 96       	adiw	r28, 0x10	; 16
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	f8 94       	cli
     868:	de bf       	out	0x3e, r29	; 62
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	cd bf       	out	0x3d, r28	; 61
     86e:	cf 91       	pop	r28
     870:	df 91       	pop	r29
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	df 90       	pop	r13
     87c:	cf 90       	pop	r12
     87e:	08 95       	ret

00000880 <receivePublicKeyElement>:

unsigned char receivePublicKeyElement(unsigned char incomingSignal, unsigned char incomingPort, unsigned char outgoingSignal, unsigned char outgoingPort)
{
     880:	df 92       	push	r13
     882:	ef 92       	push	r14
     884:	ff 92       	push	r15
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	df 93       	push	r29
     88c:	cf 93       	push	r28
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	60 97       	sbiw	r28, 0x10	; 16
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	de bf       	out	0x3e, r29	; 62
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	cd bf       	out	0x3d, r28	; 61
     89e:	18 2f       	mov	r17, r24
     8a0:	06 2f       	mov	r16, r22
     8a2:	d4 2e       	mov	r13, r20
     8a4:	f2 2e       	mov	r15, r18
	unsigned char pkElement = 0x00;

	//wait for signal to expect public key element
	waitForSignalFromPort(incomingSignal, incomingPort);
     8a6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <waitForSignalFromPort>
     8aa:	80 e1       	ldi	r24, 0x10	; 16
     8ac:	97 e2       	ldi	r25, 0x27	; 39
     8ae:	29 e1       	ldi	r18, 0x19	; 25
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	f9 01       	movw	r30, r18
     8b4:	31 97       	sbiw	r30, 0x01	; 1
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <receivePublicKeyElement+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ba:	d9 f7       	brne	.-10     	; 0x8b2 <receivePublicKeyElement+0x32>
	_delay_ms(1000.0);
	sendCharToPort(outgoingPort, 0x00);
     8bc:	8f 2d       	mov	r24, r15
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 98 02 	call	0x530	; 0x530 <sendCharToPort>


	//Get first char of public key element
	unsigned char currentChar = waitForPublicKeyCharFromPort(incomingSignal, incomingPort);
     8c4:	81 2f       	mov	r24, r17
     8c6:	60 2f       	mov	r22, r16
     8c8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <waitForPublicKeyCharFromPort>
     8cc:	e8 2e       	mov	r14, r24
     8ce:	80 e1       	ldi	r24, 0x10	; 16
     8d0:	97 e2       	ldi	r25, 0x27	; 39
     8d2:	29 e1       	ldi	r18, 0x19	; 25
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	f9 01       	movw	r30, r18
     8d8:	31 97       	sbiw	r30, 0x01	; 1
     8da:	f1 f7       	brne	.-4      	; 0x8d8 <receivePublicKeyElement+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8de:	d9 f7       	brne	.-10     	; 0x8d6 <receivePublicKeyElement+0x56>
	pkElement = pkElement + ((currentChar & 0x0F) << 4);
	_delay_ms(1000.0);
	sendCharToPort(outgoingPort, outgoingSignal);
     8e0:	8f 2d       	mov	r24, r15
     8e2:	6d 2d       	mov	r22, r13
     8e4:	0e 94 98 02 	call	0x530	; 0x530 <sendCharToPort>
	
	//wait for signal to expect public key element	
	currentChar = waitForSignalFromPort(incomingSignal, incomingPort);
     8e8:	81 2f       	mov	r24, r17
     8ea:	60 2f       	mov	r22, r16
     8ec:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <waitForSignalFromPort>
     8f0:	80 e1       	ldi	r24, 0x10	; 16
     8f2:	97 e2       	ldi	r25, 0x27	; 39
     8f4:	29 e1       	ldi	r18, 0x19	; 25
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	f9 01       	movw	r30, r18
     8fa:	31 97       	sbiw	r30, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <receivePublicKeyElement+0x7a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     900:	d9 f7       	brne	.-10     	; 0x8f8 <receivePublicKeyElement+0x78>
	_delay_ms(1000.0);
	sendCharToPort(outgoingPort, 0x00);
     902:	8f 2d       	mov	r24, r15
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	0e 94 98 02 	call	0x530	; 0x530 <sendCharToPort>

	//Get second char of public key element
	currentChar = waitForPublicKeyCharFromPort(incomingSignal, incomingPort);
     90a:	81 2f       	mov	r24, r17
     90c:	60 2f       	mov	r22, r16
     90e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <waitForPublicKeyCharFromPort>
	pkElement = pkElement + (currentChar & 0x0F);
     912:	1e 2d       	mov	r17, r14
     914:	12 95       	swap	r17
     916:	10 7f       	andi	r17, 0xF0	; 240
     918:	8f 70       	andi	r24, 0x0F	; 15
     91a:	18 0f       	add	r17, r24
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     91c:	de 01       	movw	r26, r28
     91e:	11 96       	adiw	r26, 0x01	; 1
     920:	e0 e0       	ldi	r30, 0x00	; 0
     922:	f1 e0       	ldi	r31, 0x01	; 1
     924:	80 e1       	ldi	r24, 0x10	; 16
     926:	01 90       	ld	r0, Z+
     928:	0d 92       	st	X+, r0
     92a:	81 50       	subi	r24, 0x01	; 1
     92c:	e1 f7       	brne	.-8      	; 0x926 <receivePublicKeyElement+0xa6>
	unsigned char display0 = hexBCDArray[bits0];
     92e:	81 2f       	mov	r24, r17
     930:	8f 70       	andi	r24, 0x0F	; 15
     932:	fe 01       	movw	r30, r28
     934:	31 96       	adiw	r30, 0x01	; 1
     936:	df 01       	movw	r26, r30
     938:	a8 0f       	add	r26, r24
     93a:	b1 1d       	adc	r27, r1
     93c:	9c 91       	ld	r25, X
	unsigned char display1 = hexBCDArray[bits1];
     93e:	81 2f       	mov	r24, r17
     940:	82 95       	swap	r24
     942:	8f 70       	andi	r24, 0x0F	; 15
     944:	e8 0f       	add	r30, r24
     946:	f1 1d       	adc	r31, r1
     948:	80 81       	ld	r24, Z
	if(ROLE != SENDER)
	{
		display0 = ~display0;
     94a:	90 95       	com	r25
		display1 = ~display1;
     94c:	80 95       	com	r24
	}
	PORTA = display1;
     94e:	82 b9       	out	0x02, r24	; 2
	PORTF = display0;
     950:	91 bb       	out	0x11, r25	; 17
     952:	80 e1       	ldi	r24, 0x10	; 16
     954:	97 e2       	ldi	r25, 0x27	; 39
     956:	29 e1       	ldi	r18, 0x19	; 25
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	f9 01       	movw	r30, r18
     95c:	31 97       	sbiw	r30, 0x01	; 1
     95e:	f1 f7       	brne	.-4      	; 0x95c <receivePublicKeyElement+0xdc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     960:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     962:	d9 f7       	brne	.-10     	; 0x95a <receivePublicKeyElement+0xda>
	//Get second char of public key element
	currentChar = waitForPublicKeyCharFromPort(incomingSignal, incomingPort);
	pkElement = pkElement + (currentChar & 0x0F);
	display2CharsOn7SegBCD(pkElement);
	_delay_ms(1000.0);
	sendCharToPort(outgoingPort, outgoingSignal);
     964:	8f 2d       	mov	r24, r15
     966:	6d 2d       	mov	r22, r13
     968:	0e 94 98 02 	call	0x530	; 0x530 <sendCharToPort>

	return pkElement;
}
     96c:	81 2f       	mov	r24, r17
     96e:	60 96       	adiw	r28, 0x10	; 16
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	f8 94       	cli
     974:	de bf       	out	0x3e, r29	; 62
     976:	0f be       	out	0x3f, r0	; 63
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	cf 91       	pop	r28
     97c:	df 91       	pop	r29
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	df 90       	pop	r13
     988:	08 95       	ret

0000098a <sendPublicKeyElement>:

	return publicKey;
}

void sendPublicKeyElement(unsigned char incomingSignal, unsigned char incomingPort, unsigned char outgoingSignal, unsigned char outgoingPort, unsigned int pkElement)
{
     98a:	4f 92       	push	r4
     98c:	5f 92       	push	r5
     98e:	6f 92       	push	r6
     990:	7f 92       	push	r7
     992:	8f 92       	push	r8
     994:	9f 92       	push	r9
     996:	af 92       	push	r10
     998:	bf 92       	push	r11
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	df 93       	push	r29
     9a8:	cf 93       	push	r28
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
     9ae:	60 97       	sbiw	r28, 0x10	; 16
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	48 2e       	mov	r4, r24
     9bc:	66 2e       	mov	r6, r22
     9be:	a4 2e       	mov	r10, r20
     9c0:	72 2e       	mov	r7, r18
     9c2:	90 2e       	mov	r9, r16
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     9c4:	de 01       	movw	r26, r28
     9c6:	11 96       	adiw	r26, 0x01	; 1
     9c8:	e0 e0       	ldi	r30, 0x00	; 0
     9ca:	f1 e0       	ldi	r31, 0x01	; 1
     9cc:	80 e1       	ldi	r24, 0x10	; 16
     9ce:	01 90       	ld	r0, Z+
     9d0:	0d 92       	st	X+, r0
     9d2:	81 50       	subi	r24, 0x01	; 1
     9d4:	e1 f7       	brne	.-8      	; 0x9ce <sendPublicKeyElement+0x44>
	unsigned char display0 = hexBCDArray[bits0];
     9d6:	8a 2d       	mov	r24, r10
     9d8:	8f 70       	andi	r24, 0x0F	; 15
     9da:	e8 2e       	mov	r14, r24
     9dc:	ff 24       	eor	r15, r15
     9de:	8e 01       	movw	r16, r28
     9e0:	0f 5f       	subi	r16, 0xFF	; 255
     9e2:	1f 4f       	sbci	r17, 0xFF	; 255
     9e4:	f8 01       	movw	r30, r16
     9e6:	ee 0d       	add	r30, r14
     9e8:	ff 1d       	adc	r31, r15
     9ea:	90 81       	ld	r25, Z
	unsigned char display1 = hexBCDArray[bits1];
     9ec:	8a 2d       	mov	r24, r10
     9ee:	82 95       	swap	r24
     9f0:	8f 70       	andi	r24, 0x0F	; 15
     9f2:	c8 2e       	mov	r12, r24
     9f4:	dd 24       	eor	r13, r13
     9f6:	f8 01       	movw	r30, r16
     9f8:	ec 0d       	add	r30, r12
     9fa:	fd 1d       	adc	r31, r13
     9fc:	80 81       	ld	r24, Z
	if(ROLE != SENDER)
	{
		display0 = ~display0;
     9fe:	90 95       	com	r25
		display1 = ~display1;
     a00:	80 95       	com	r24
	}
	PORTA = display1;
     a02:	82 b9       	out	0x02, r24	; 2
	PORTF = display0;
     a04:	91 bb       	out	0x11, r25	; 17

void sendPublicKeyElement(unsigned char incomingSignal, unsigned char incomingPort, unsigned char outgoingSignal, unsigned char outgoingPort, unsigned int pkElement)
{
	//send signal to prep reciever to have public key element sent
	display2CharsOn7SegBCD(outgoingSignal);
	sendCharToPort(outgoingPort, outgoingSignal);
     a06:	87 2d       	mov	r24, r7
     a08:	6a 2d       	mov	r22, r10
     a0a:	0e 94 98 02 	call	0x530	; 0x530 <sendCharToPort>
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     a0e:	d8 01       	movw	r26, r16
     a10:	e0 e0       	ldi	r30, 0x00	; 0
     a12:	f1 e0       	ldi	r31, 0x01	; 1
     a14:	80 e1       	ldi	r24, 0x10	; 16
     a16:	01 90       	ld	r0, Z+
     a18:	0d 92       	st	X+, r0
     a1a:	81 50       	subi	r24, 0x01	; 1
     a1c:	e1 f7       	brne	.-8      	; 0xa16 <sendPublicKeyElement+0x8c>
	unsigned char display0 = hexBCDArray[bits0];
     a1e:	fe 01       	movw	r30, r28
     a20:	31 96       	adiw	r30, 0x01	; 1
     a22:	df 01       	movw	r26, r30
     a24:	ae 0d       	add	r26, r14
     a26:	bf 1d       	adc	r27, r15
     a28:	9c 91       	ld	r25, X
	unsigned char display1 = hexBCDArray[bits1];
     a2a:	ec 0d       	add	r30, r12
     a2c:	fd 1d       	adc	r31, r13
     a2e:	80 81       	ld	r24, Z
	if(ROLE != SENDER)
	{
		display0 = ~display0;
     a30:	90 95       	com	r25
		display1 = ~display1;
     a32:	80 95       	com	r24
	}
	PORTA = display1;
     a34:	82 b9       	out	0x02, r24	; 2
	PORTF = display0;
     a36:	91 bb       	out	0x11, r25	; 17
{
	//send signal to prep reciever to have public key element sent
	display2CharsOn7SegBCD(outgoingSignal);
	sendCharToPort(outgoingPort, outgoingSignal);
	display2CharsOn7SegBCD(outgoingSignal);
	waitForSignalFromPort(0x00, incomingPort);
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	66 2d       	mov	r22, r6
     a3c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <waitForSignalFromPort>
     a40:	80 e1       	ldi	r24, 0x10	; 16
     a42:	97 e2       	ldi	r25, 0x27	; 39
     a44:	29 e1       	ldi	r18, 0x19	; 25
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	f9 01       	movw	r30, r18
     a4a:	31 97       	sbiw	r30, 0x01	; 1
     a4c:	f1 f7       	brne	.-4      	; 0xa4a <sendPublicKeyElement+0xc0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a4e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a50:	d9 f7       	brne	.-10     	; 0xa48 <sendPublicKeyElement+0xbe>
	_delay_ms(1000.0);	

	//send first char of public key element pair
	unsigned char currentChar = ((unsigned char)(pkElement & 0xF0) >> 4);
     a52:	b9 2c       	mov	r11, r9
     a54:	b2 94       	swap	r11
     a56:	6f e0       	ldi	r22, 0x0F	; 15
     a58:	b6 22       	and	r11, r22
	sendCharToPort(outgoingPort, currentChar);
     a5a:	87 2d       	mov	r24, r7
     a5c:	6b 2d       	mov	r22, r11
     a5e:	0e 94 98 02 	call	0x530	; 0x530 <sendCharToPort>
	waitForSignalFromPort(incomingSignal, incomingPort);
     a62:	84 2d       	mov	r24, r4
     a64:	66 2d       	mov	r22, r6
     a66:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <waitForSignalFromPort>
	return output;
}

void display2CharsOn7SegBCD(unsigned char bcd)
{
	unsigned char bits0 = (bcd & 0b00001111);
     a6a:	5f e0       	ldi	r21, 0x0F	; 15
     a6c:	55 2e       	mov	r5, r21
     a6e:	59 20       	and	r5, r9
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     a70:	de 01       	movw	r26, r28
     a72:	11 96       	adiw	r26, 0x01	; 1
     a74:	e0 e0       	ldi	r30, 0x00	; 0
     a76:	f1 e0       	ldi	r31, 0x01	; 1
     a78:	80 e1       	ldi	r24, 0x10	; 16
     a7a:	01 90       	ld	r0, Z+
     a7c:	0d 92       	st	X+, r0
     a7e:	81 50       	subi	r24, 0x01	; 1
     a80:	e1 f7       	brne	.-8      	; 0xa7a <sendPublicKeyElement+0xf0>
	unsigned char display0 = hexBCDArray[bits0];
     a82:	05 2d       	mov	r16, r5
     a84:	10 e0       	ldi	r17, 0x00	; 0
     a86:	fe 01       	movw	r30, r28
     a88:	31 96       	adiw	r30, 0x01	; 1
     a8a:	df 01       	movw	r26, r30
     a8c:	a0 0f       	add	r26, r16
     a8e:	b1 1f       	adc	r27, r17
     a90:	9c 91       	ld	r25, X
	unsigned char display1 = hexBCDArray[bits1];
     a92:	8b 2c       	mov	r8, r11
     a94:	99 24       	eor	r9, r9
     a96:	e8 0d       	add	r30, r8
     a98:	f9 1d       	adc	r31, r9
     a9a:	80 81       	ld	r24, Z
	if(ROLE != SENDER)
	{
		display0 = ~display0;
     a9c:	90 95       	com	r25
		display1 = ~display1;
     a9e:	80 95       	com	r24
	}
	PORTA = display1;
     aa0:	82 b9       	out	0x02, r24	; 2
	PORTF = display0;
     aa2:	91 bb       	out	0x11, r25	; 17
     aa4:	80 e1       	ldi	r24, 0x10	; 16
     aa6:	97 e2       	ldi	r25, 0x27	; 39
     aa8:	29 e1       	ldi	r18, 0x19	; 25
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	f9 01       	movw	r30, r18
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f1 f7       	brne	.-4      	; 0xaae <sendPublicKeyElement+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ab2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ab4:	d9 f7       	brne	.-10     	; 0xaac <sendPublicKeyElement+0x122>
	waitForSignalFromPort(incomingSignal, incomingPort);
	display2CharsOn7SegBCD(pkElement);
	_delay_ms(1000.0);

	//send signal to prep for second char
	sendCharToPort(outgoingPort, outgoingSignal);
     ab6:	87 2d       	mov	r24, r7
     ab8:	6a 2d       	mov	r22, r10
     aba:	0e 94 98 02 	call	0x530	; 0x530 <sendCharToPort>
	waitForSignalFromPort(0x00, incomingPort);
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	66 2d       	mov	r22, r6
     ac2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <waitForSignalFromPort>
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     ac6:	de 01       	movw	r26, r28
     ac8:	11 96       	adiw	r26, 0x01	; 1
     aca:	e0 e0       	ldi	r30, 0x00	; 0
     acc:	f1 e0       	ldi	r31, 0x01	; 1
     ace:	80 e1       	ldi	r24, 0x10	; 16
     ad0:	01 90       	ld	r0, Z+
     ad2:	0d 92       	st	X+, r0
     ad4:	81 50       	subi	r24, 0x01	; 1
     ad6:	e1 f7       	brne	.-8      	; 0xad0 <sendPublicKeyElement+0x146>
	unsigned char display0 = hexBCDArray[bits0];
     ad8:	fe 01       	movw	r30, r28
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	ee 0e       	add	r14, r30
     ade:	ff 1e       	adc	r15, r31
     ae0:	d7 01       	movw	r26, r14
     ae2:	9c 91       	ld	r25, X
	unsigned char display1 = hexBCDArray[bits1];
     ae4:	ec 0d       	add	r30, r12
     ae6:	fd 1d       	adc	r31, r13
     ae8:	80 81       	ld	r24, Z
	if(ROLE != SENDER)
	{
		display0 = ~display0;
     aea:	90 95       	com	r25
		display1 = ~display1;
     aec:	80 95       	com	r24
	}
	PORTA = display1;
     aee:	82 b9       	out	0x02, r24	; 2
	PORTF = display0;
     af0:	91 bb       	out	0x11, r25	; 17
     af2:	80 e1       	ldi	r24, 0x10	; 16
     af4:	97 e2       	ldi	r25, 0x27	; 39
     af6:	29 e1       	ldi	r18, 0x19	; 25
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	f9 01       	movw	r30, r18
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	f1 f7       	brne	.-4      	; 0xafc <sendPublicKeyElement+0x172>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b00:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b02:	d9 f7       	brne	.-10     	; 0xafa <sendPublicKeyElement+0x170>
	display2CharsOn7SegBCD(outgoingSignal);
	_delay_ms(1000.0);	

	//send second char of public key element
	currentChar = (unsigned char)(pkElement & 0x0F);
	sendCharToPort(outgoingPort, currentChar);
     b04:	87 2d       	mov	r24, r7
     b06:	65 2d       	mov	r22, r5
     b08:	0e 94 98 02 	call	0x530	; 0x530 <sendCharToPort>
	waitForSignalFromPort(incomingSignal, incomingPort);
     b0c:	84 2d       	mov	r24, r4
     b0e:	66 2d       	mov	r22, r6
     b10:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <waitForSignalFromPort>
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     b14:	de 01       	movw	r26, r28
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f1 e0       	ldi	r31, 0x01	; 1
     b1c:	80 e1       	ldi	r24, 0x10	; 16
     b1e:	01 90       	ld	r0, Z+
     b20:	0d 92       	st	X+, r0
     b22:	81 50       	subi	r24, 0x01	; 1
     b24:	e1 f7       	brne	.-8      	; 0xb1e <sendPublicKeyElement+0x194>
	unsigned char display0 = hexBCDArray[bits0];
     b26:	fe 01       	movw	r30, r28
     b28:	31 96       	adiw	r30, 0x01	; 1
     b2a:	0e 0f       	add	r16, r30
     b2c:	1f 1f       	adc	r17, r31
     b2e:	d8 01       	movw	r26, r16
     b30:	9c 91       	ld	r25, X
	unsigned char display1 = hexBCDArray[bits1];
     b32:	e8 0d       	add	r30, r8
     b34:	f9 1d       	adc	r31, r9
     b36:	80 81       	ld	r24, Z
	if(ROLE != SENDER)
	{
		display0 = ~display0;
     b38:	90 95       	com	r25
		display1 = ~display1;
     b3a:	80 95       	com	r24
	}
	PORTA = display1;
     b3c:	82 b9       	out	0x02, r24	; 2
	PORTF = display0;
     b3e:	91 bb       	out	0x11, r25	; 17
     b40:	80 e1       	ldi	r24, 0x10	; 16
     b42:	97 e2       	ldi	r25, 0x27	; 39
     b44:	29 e1       	ldi	r18, 0x19	; 25
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	f9 01       	movw	r30, r18
     b4a:	31 97       	sbiw	r30, 0x01	; 1
     b4c:	f1 f7       	brne	.-4      	; 0xb4a <sendPublicKeyElement+0x1c0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b4e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b50:	d9 f7       	brne	.-10     	; 0xb48 <sendPublicKeyElement+0x1be>
	currentChar = (unsigned char)(pkElement & 0x0F);
	sendCharToPort(outgoingPort, currentChar);
	waitForSignalFromPort(incomingSignal, incomingPort);
	display2CharsOn7SegBCD(pkElement);
	_delay_ms(1000.0);
}
     b52:	60 96       	adiw	r28, 0x10	; 16
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	cf 91       	pop	r28
     b60:	df 91       	pop	r29
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	df 90       	pop	r13
     b6c:	cf 90       	pop	r12
     b6e:	bf 90       	pop	r11
     b70:	af 90       	pop	r10
     b72:	9f 90       	pop	r9
     b74:	8f 90       	pop	r8
     b76:	7f 90       	pop	r7
     b78:	6f 90       	pop	r6
     b7a:	5f 90       	pop	r5
     b7c:	4f 90       	pop	r4
     b7e:	08 95       	ret

00000b80 <sendPublicKey>:

void sendPublicKey(unsigned char incomingSignal, unsigned char incomingPort, unsigned char outgoingSignal, unsigned char outgoingPort, unsigned int e, unsigned int n)
{
     b80:	af 92       	push	r10
     b82:	bf 92       	push	r11
     b84:	cf 92       	push	r12
     b86:	df 92       	push	r13
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	60 97       	sbiw	r28, 0x10	; 16
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	c8 2e       	mov	r12, r24
     ba6:	b6 2e       	mov	r11, r22
     ba8:	a4 2e       	mov	r10, r20
     baa:	d2 2e       	mov	r13, r18
	//Send e of public key pair
	sendPublicKeyElement(incomingSignal, incomingPort, outgoingSignal, outgoingPort, e);
     bac:	0e 94 c5 04 	call	0x98a	; 0x98a <sendPublicKeyElement>

	//Send e of public key pair
	sendPublicKeyElement(incomingSignal, incomingPort, outgoingSignal, outgoingPort, n);
     bb0:	8c 2d       	mov	r24, r12
     bb2:	6b 2d       	mov	r22, r11
     bb4:	4a 2d       	mov	r20, r10
     bb6:	2d 2d       	mov	r18, r13
     bb8:	87 01       	movw	r16, r14
     bba:	0e 94 c5 04 	call	0x98a	; 0x98a <sendPublicKeyElement>

	//Send signal that public key pair sent
	sendCharToPort(outgoingPort, outgoingSignal);
     bbe:	8d 2d       	mov	r24, r13
     bc0:	6a 2d       	mov	r22, r10
     bc2:	0e 94 98 02 	call	0x530	; 0x530 <sendCharToPort>
{
	unsigned char bits0 = (bcd & 0b00001111);
	unsigned char bits1 = (unsigned char)(bcd>>4);
	unsigned char hexBCDArray[] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110,
								   0b10111110, 0b11100000, 0b11111110, 0b11100110, 0b11101110, 0b00111110,
								   0b10011100, 0b01111010, 0b10011110, 0b10001110};
     bc6:	de 01       	movw	r26, r28
     bc8:	11 96       	adiw	r26, 0x01	; 1
     bca:	e0 e0       	ldi	r30, 0x00	; 0
     bcc:	f1 e0       	ldi	r31, 0x01	; 1
     bce:	80 e1       	ldi	r24, 0x10	; 16
     bd0:	01 90       	ld	r0, Z+
     bd2:	0d 92       	st	X+, r0
     bd4:	81 50       	subi	r24, 0x01	; 1
     bd6:	e1 f7       	brne	.-8      	; 0xbd0 <sendPublicKey+0x50>
	unsigned char display0 = hexBCDArray[bits0];
     bd8:	8a 2d       	mov	r24, r10
     bda:	8f 70       	andi	r24, 0x0F	; 15
     bdc:	fe 01       	movw	r30, r28
     bde:	31 96       	adiw	r30, 0x01	; 1
     be0:	df 01       	movw	r26, r30
     be2:	a8 0f       	add	r26, r24
     be4:	b1 1d       	adc	r27, r1
     be6:	9c 91       	ld	r25, X
	unsigned char display1 = hexBCDArray[bits1];
     be8:	a2 94       	swap	r10
     bea:	7f e0       	ldi	r23, 0x0F	; 15
     bec:	a7 22       	and	r10, r23
     bee:	ea 0d       	add	r30, r10
     bf0:	f1 1d       	adc	r31, r1
     bf2:	80 81       	ld	r24, Z
	if(ROLE != SENDER)
	{
		display0 = ~display0;
     bf4:	90 95       	com	r25
		display1 = ~display1;
     bf6:	80 95       	com	r24
	}
	PORTA = display1;
     bf8:	82 b9       	out	0x02, r24	; 2
	PORTF = display0;
     bfa:	91 bb       	out	0x11, r25	; 17
     bfc:	80 e1       	ldi	r24, 0x10	; 16
     bfe:	97 e2       	ldi	r25, 0x27	; 39
     c00:	29 e1       	ldi	r18, 0x19	; 25
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	f9 01       	movw	r30, r18
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <sendPublicKey+0x86>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c0a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c0c:	d9 f7       	brne	.-10     	; 0xc04 <sendPublicKey+0x84>

	//Send signal that public key pair sent
	sendCharToPort(outgoingPort, outgoingSignal);
	display2CharsOn7SegBCD(outgoingSignal);
	_delay_ms(1000.0);
}
     c0e:	60 96       	adiw	r28, 0x10	; 16
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	cd bf       	out	0x3d, r28	; 61
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	ff 90       	pop	r15
     c24:	ef 90       	pop	r14
     c26:	df 90       	pop	r13
     c28:	cf 90       	pop	r12
     c2a:	bf 90       	pop	r11
     c2c:	af 90       	pop	r10
     c2e:	08 95       	ret

00000c30 <receivePublicKey>:

	return pkElement;
}

unsigned int *receivePublicKey(unsigned char incomingSignal, unsigned char incomingPort, unsigned char outgoingSignal, unsigned char outgoingPort)
{
     c30:	bf 92       	push	r11
     c32:	cf 92       	push	r12
     c34:	df 92       	push	r13
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	f8 2e       	mov	r15, r24
     c40:	e6 2e       	mov	r14, r22
     c42:	d4 2e       	mov	r13, r20
     c44:	c2 2e       	mov	r12, r18

	unsigned int *publicKey = (unsigned int*)malloc(sizeof(unsigned int)*2);
     c46:	84 e0       	ldi	r24, 0x04	; 4
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 29 08 	call	0x1052	; 0x1052 <malloc>
     c4e:	b9 2e       	mov	r11, r25
     c50:	08 2f       	mov	r16, r24
     c52:	19 2f       	mov	r17, r25
	unsigned char e = 0x00;
	unsigned char n = 0x00;

	//recv'd e
	e = receivePublicKeyElement(incomingSignal, incomingPort, outgoingSignal, outgoingPort);
     c54:	8f 2d       	mov	r24, r15
     c56:	6e 2d       	mov	r22, r14
     c58:	4d 2d       	mov	r20, r13
     c5a:	2c 2d       	mov	r18, r12
     c5c:	0e 94 40 04 	call	0x880	; 0x880 <receivePublicKeyElement>
	*(publicKey) = (unsigned int)e;
     c60:	f8 01       	movw	r30, r16
     c62:	80 83       	st	Z, r24
     c64:	11 82       	std	Z+1, r1	; 0x01

	//recv'd n
	n = receivePublicKeyElement(incomingSignal, incomingPort, outgoingSignal, outgoingPort); 
     c66:	8f 2d       	mov	r24, r15
     c68:	6e 2d       	mov	r22, r14
     c6a:	4d 2d       	mov	r20, r13
     c6c:	2c 2d       	mov	r18, r12
     c6e:	0e 94 40 04 	call	0x880	; 0x880 <receivePublicKeyElement>
	*(publicKey + 1) = (unsigned int)n;
     c72:	f8 01       	movw	r30, r16
     c74:	82 83       	std	Z+2, r24	; 0x02
     c76:	13 82       	std	Z+3, r1	; 0x03

	return publicKey;
}
     c78:	80 2f       	mov	r24, r16
     c7a:	9b 2d       	mov	r25, r11
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	cf 90       	pop	r12
     c88:	bf 90       	pop	r11
     c8a:	08 95       	ret

00000c8c <getD>:
	return encryptedByte;
}

//tested
unsigned int getD(unsigned int totient, unsigned int e)
{
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	8c 01       	movw	r16, r24
     c96:	eb 01       	movw	r28, r22
     c98:	fb 01       	movw	r30, r22
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	22 e0       	ldi	r18, 0x02	; 2
     ca0:	30 e0       	ldi	r19, 0x00	; 0
	unsigned int d;
	for(d = 2; d < 0xffff; d++)
	{
		unsigned int ed = e * d;
		unsigned int EDmodTotient = (ed) % totient;
		if(EDmodTotient == 1)
     ca2:	cf 01       	movw	r24, r30
     ca4:	b8 01       	movw	r22, r16
     ca6:	0e 94 96 09 	call	0x132c	; 0x132c <__udivmodhi4>
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	41 f0       	breq	.+16     	; 0xcbe <getD+0x32>

//tested
unsigned int getD(unsigned int totient, unsigned int e)
{
	unsigned int d;
	for(d = 2; d < 0xffff; d++)
     cae:	2f 5f       	subi	r18, 0xFF	; 255
     cb0:	3f 4f       	sbci	r19, 0xFF	; 255
     cb2:	ec 0f       	add	r30, r28
     cb4:	fd 1f       	adc	r31, r29
     cb6:	8f ef       	ldi	r24, 0xFF	; 255
     cb8:	2f 3f       	cpi	r18, 0xFF	; 255
     cba:	38 07       	cpc	r19, r24
     cbc:	91 f7       	brne	.-28     	; 0xca2 <getD+0x16>
		{
			return d;
		}
	}
	return d;
}
     cbe:	c9 01       	movw	r24, r18
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	08 95       	ret

00000cca <getCoPrimeNumber>:

//tested
unsigned int getCoPrimeNumber(unsigned int a, unsigned int seed)
{
     cca:	f8 2f       	mov	r31, r24
     ccc:	e9 2f       	mov	r30, r25
     cce:	42 e0       	ldi	r20, 0x02	; 2
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	62 e0       	ldi	r22, 0x02	; 2
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	16 c0       	rjmp	.+44     	; 0xd04 <getCoPrimeNumber+0x3a>
//Tested
unsigned int avrGcd(unsigned int a, unsigned int b)
{
	while(a!=b)
	{
		if(a>b)
     cd8:	42 17       	cp	r20, r18
     cda:	53 07       	cpc	r21, r19
     cdc:	18 f4       	brcc	.+6      	; 0xce4 <getCoPrimeNumber+0x1a>
		{
			a=a-b;
     cde:	24 1b       	sub	r18, r20
     ce0:	35 0b       	sbc	r19, r21
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <getCoPrimeNumber+0x1e>
		}
		else
		{
			b=b-a;
     ce4:	42 1b       	sub	r20, r18
     ce6:	53 0b       	sbc	r21, r19
}

//Tested
unsigned int avrGcd(unsigned int a, unsigned int b)
{
	while(a!=b)
     ce8:	24 17       	cp	r18, r20
     cea:	35 07       	cpc	r19, r21
     cec:	a9 f7       	brne	.-22     	; 0xcd8 <getCoPrimeNumber+0xe>
//test
int testCoprimality(unsigned int a, unsigned int b)
{
	int coprime = 0;
	unsigned int gcdVal = avrGcd(a,b);
	if(gcdVal == 1)
     cee:	41 30       	cpi	r20, 0x01	; 1
     cf0:	51 05       	cpc	r21, r1
     cf2:	71 f0       	breq	.+28     	; 0xd10 <getCoPrimeNumber+0x46>
//tested
unsigned int getCoPrimeNumber(unsigned int a, unsigned int seed)
{
	unsigned int b;
	int areCoprime = 0;
	for(b = 2; b < 0xffff; b++)
     cf4:	ab 01       	movw	r20, r22
     cf6:	4f 5f       	subi	r20, 0xFF	; 255
     cf8:	5f 4f       	sbci	r21, 0xFF	; 255
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	4f 3f       	cpi	r20, 0xFF	; 255
     cfe:	58 07       	cpc	r21, r24
     d00:	29 f0       	breq	.+10     	; 0xd0c <getCoPrimeNumber+0x42>
     d02:	ba 01       	movw	r22, r20
     d04:	8f 2f       	mov	r24, r31
     d06:	9e 2f       	mov	r25, r30
     d08:	9c 01       	movw	r18, r24
     d0a:	ee cf       	rjmp	.-36     	; 0xce8 <getCoPrimeNumber+0x1e>
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	70 e0       	ldi	r23, 0x00	; 0
		{
			return b;
		}
	}
	return 1;
}
     d10:	cb 01       	movw	r24, r22
     d12:	08 95       	ret

00000d14 <testCoprimality>:

//test
int testCoprimality(unsigned int a, unsigned int b)
{
     d14:	08 c0       	rjmp	.+16     	; 0xd26 <testCoprimality+0x12>
//Tested
unsigned int avrGcd(unsigned int a, unsigned int b)
{
	while(a!=b)
	{
		if(a>b)
     d16:	68 17       	cp	r22, r24
     d18:	79 07       	cpc	r23, r25
     d1a:	18 f4       	brcc	.+6      	; 0xd22 <testCoprimality+0xe>
		{
			a=a-b;
     d1c:	86 1b       	sub	r24, r22
     d1e:	97 0b       	sbc	r25, r23
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <testCoprimality+0x12>
		}
		else
		{
			b=b-a;
     d22:	68 1b       	sub	r22, r24
     d24:	79 0b       	sbc	r23, r25
}

//Tested
unsigned int avrGcd(unsigned int a, unsigned int b)
{
	while(a!=b)
     d26:	86 17       	cp	r24, r22
     d28:	97 07       	cpc	r25, r23
     d2a:	a9 f7       	brne	.-22     	; 0xd16 <testCoprimality+0x2>
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	11 f4       	brne	.+4      	; 0xd38 <testCoprimality+0x24>
     d34:	21 e0       	ldi	r18, 0x01	; 1
     d36:	30 e0       	ldi	r19, 0x00	; 0
	if(gcdVal == 1)
	{
		coprime = 1;
	}
	return coprime;
}
     d38:	c9 01       	movw	r24, r18
     d3a:	08 95       	ret

00000d3c <avrGcd>:

//Tested
unsigned int avrGcd(unsigned int a, unsigned int b)
{
     d3c:	9c 01       	movw	r18, r24
     d3e:	08 c0       	rjmp	.+16     	; 0xd50 <avrGcd+0x14>
	while(a!=b)
	{
		if(a>b)
     d40:	62 17       	cp	r22, r18
     d42:	73 07       	cpc	r23, r19
     d44:	18 f4       	brcc	.+6      	; 0xd4c <avrGcd+0x10>
		{
			a=a-b;
     d46:	26 1b       	sub	r18, r22
     d48:	37 0b       	sbc	r19, r23
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <avrGcd+0x14>
		}
		else
		{
			b=b-a;
     d4c:	62 1b       	sub	r22, r18
     d4e:	73 0b       	sbc	r23, r19
}

//Tested
unsigned int avrGcd(unsigned int a, unsigned int b)
{
	while(a!=b)
     d50:	26 17       	cp	r18, r22
     d52:	37 07       	cpc	r19, r23
     d54:	a9 f7       	brne	.-22     	; 0xd40 <avrGcd+0x4>
		{
			b=b-a;
		}
	}
	return a;
}
     d56:	c9 01       	movw	r24, r18
     d58:	08 95       	ret

00000d5a <power>:
	return randomValue;
}

//tested
unsigned char *power(unsigned char a, unsigned char n)
{
     d5a:	8f 92       	push	r8
     d5c:	9f 92       	push	r9
     d5e:	af 92       	push	r10
     d60:	bf 92       	push	r11
     d62:	df 92       	push	r13
     d64:	ef 92       	push	r14
     d66:	ff 92       	push	r15
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	d8 2e       	mov	r13, r24
     d72:	f6 2e       	mov	r15, r22
	unsigned char *b = (unsigned char*)malloc(sizeof(unsigned char)*n);
     d74:	c6 2f       	mov	r28, r22
     d76:	d0 e0       	ldi	r29, 0x00	; 0
     d78:	ce 01       	movw	r24, r28
     d7a:	0e 94 29 08 	call	0x1052	; 0x1052 <malloc>
     d7e:	8c 01       	movw	r16, r24
	unsigned char *c = (unsigned char*)malloc(sizeof(unsigned char)*n);
     d80:	ce 01       	movw	r24, r28
     d82:	0e 94 29 08 	call	0x1052	; 0x1052 <malloc>
     d86:	bc 01       	movw	r22, r24
     d88:	f8 01       	movw	r30, r16
	for(int j = 0; j < n; j++)
     d8a:	5e 01       	movw	r10, r28
     d8c:	c8 01       	movw	r24, r16
     d8e:	8c 0f       	add	r24, r28
     d90:	9d 1f       	adc	r25, r29
     d92:	01 c0       	rjmp	.+2      	; 0xd96 <power+0x3c>
	{
		*(b+j) = 0x00;
     d94:	11 92       	st	Z+, r1
//tested
unsigned char *power(unsigned char a, unsigned char n)
{
	unsigned char *b = (unsigned char*)malloc(sizeof(unsigned char)*n);
	unsigned char *c = (unsigned char*)malloc(sizeof(unsigned char)*n);
	for(int j = 0; j < n; j++)
     d96:	e8 17       	cp	r30, r24
     d98:	f9 07       	cpc	r31, r25
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <power+0x3a>
	{
		*(b+j) = 0x00;
	}
	if(n > 1)
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	8f 15       	cp	r24, r15
     da0:	08 f0       	brcs	.+2      	; 0xda4 <power+0x4a>
     da2:	6c c0       	rjmp	.+216    	; 0xe7c <power+0x122>
	{
		*b = a;
     da4:	f8 01       	movw	r30, r16
     da6:	d0 82       	st	Z, r13
     da8:	92 e0       	ldi	r25, 0x02	; 2
     daa:	e9 2e       	mov	r14, r25
     dac:	f1 2c       	mov	r15, r1
		for(int i = 2; i <= n; i++)
		{
			for(int j = 0; j < n; j++)
     dae:	4b 01       	movw	r8, r22
     db0:	8c 0e       	add	r8, r28
     db2:	9d 1e       	adc	r9, r29
     db4:	5d c0       	rjmp	.+186    	; 0xe70 <power+0x116>
			{
				*(c+j) = 0x00;
     db6:	11 92       	st	Z+, r1
	if(n > 1)
	{
		*b = a;
		for(int i = 2; i <= n; i++)
		{
			for(int j = 0; j < n; j++)
     db8:	e8 15       	cp	r30, r8
     dba:	f9 05       	cpc	r31, r9
     dbc:	e1 f7       	brne	.-8      	; 0xdb6 <power+0x5c>
     dbe:	a0 e0       	ldi	r26, 0x00	; 0
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
				*(c+j) = 0x00;
			}
			//do byte-array byte multiplication
			for(int j = 0; j < i; j++)
			{
				unsigned int res = *(b+j)*a;
     dc2:	f8 01       	movw	r30, r16
     dc4:	ea 0f       	add	r30, r26
     dc6:	fb 1f       	adc	r31, r27
     dc8:	80 81       	ld	r24, Z
     dca:	d8 9e       	mul	r13, r24
     dcc:	90 01       	movw	r18, r0
     dce:	11 24       	eor	r1, r1
				if(res > 0)
     dd0:	21 15       	cp	r18, r1
     dd2:	31 05       	cpc	r19, r1
     dd4:	a9 f1       	breq	.+106    	; 0xe40 <power+0xe6>
				{
					unsigned char loRes = (unsigned char)res;
     dd6:	42 2f       	mov	r20, r18
					unsigned char hiRes = (unsigned char)(res >> 8);
     dd8:	93 2f       	mov	r25, r19
					if(loRes > 0)
     dda:	22 23       	and	r18, r18
     ddc:	b9 f0       	breq	.+46     	; 0xe0c <power+0xb2>
					{
						unsigned int loResloC = loRes + *(c+j);
     dde:	88 81       	ld	r24, Y
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	24 0f       	add	r18, r20
     de6:	31 1d       	adc	r19, r1
     de8:	ad 01       	movw	r20, r26
     dea:	4f 5f       	subi	r20, 0xFF	; 255
     dec:	5f 4f       	sbci	r21, 0xFF	; 255
     dee:	fe 01       	movw	r30, r28
     df0:	0a c0       	rjmp	.+20     	; 0xe06 <power+0xac>
						for(int k = j+1; k <= i; k++)
						{
							unsigned char tempHi = (unsigned char)(loResloC >> 8);
							unsigned char tempLo = (unsigned char)(loResloC);	
							*(c+k-1) = tempLo;
     df2:	21 93       	st	Z+, r18
							if(tempHi > 0)
     df4:	33 23       	and	r19, r19
     df6:	51 f0       	breq	.+20     	; 0xe0c <power+0xb2>
							{
								loResloC = tempHi + *(c+k);
     df8:	80 81       	ld	r24, Z
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	2f 5f       	subi	r18, 0xFF	; 255
     e00:	3f 4f       	sbci	r19, 0xFF	; 255
					unsigned char loRes = (unsigned char)res;
					unsigned char hiRes = (unsigned char)(res >> 8);
					if(loRes > 0)
					{
						unsigned int loResloC = loRes + *(c+j);
						for(int k = j+1; k <= i; k++)
     e02:	4f 5f       	subi	r20, 0xFF	; 255
     e04:	5f 4f       	sbci	r21, 0xFF	; 255
     e06:	e4 16       	cp	r14, r20
     e08:	f5 06       	cpc	r15, r21
     e0a:	9c f7       	brge	.-26     	; 0xdf2 <power+0x98>
							{
								break;
							}
						}
					}
					if(hiRes > 0)
     e0c:	99 23       	and	r25, r25
     e0e:	c1 f0       	breq	.+48     	; 0xe40 <power+0xe6>
					{
						unsigned int hiReshiC = hiRes + *(c+j+1);
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	29 0f       	add	r18, r25
     e18:	31 1d       	adc	r19, r1
     e1a:	ad 01       	movw	r20, r26
     e1c:	4e 5f       	subi	r20, 0xFE	; 254
     e1e:	5f 4f       	sbci	r21, 0xFF	; 255
     e20:	fe 01       	movw	r30, r28
     e22:	0b c0       	rjmp	.+22     	; 0xe3a <power+0xe0>
						for(int k = j+2; k <=i; k++)
						{
							unsigned char tempHi = (unsigned char)(hiReshiC >> 8);
							unsigned char tempLo = (unsigned char)(hiReshiC);
							*(c+k-1) = tempLo;
     e24:	21 83       	std	Z+1, r18	; 0x01
     e26:	31 96       	adiw	r30, 0x01	; 1
							if(tempHi > 0)
     e28:	33 23       	and	r19, r19
     e2a:	51 f0       	breq	.+20     	; 0xe40 <power+0xe6>
							{
								hiReshiC = tempHi + *(c+k);
     e2c:	81 81       	ldd	r24, Z+1	; 0x01
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	2f 5f       	subi	r18, 0xFF	; 255
     e34:	3f 4f       	sbci	r19, 0xFF	; 255
						}
					}
					if(hiRes > 0)
					{
						unsigned int hiReshiC = hiRes + *(c+j+1);
						for(int k = j+2; k <=i; k++)
     e36:	4f 5f       	subi	r20, 0xFF	; 255
     e38:	5f 4f       	sbci	r21, 0xFF	; 255
     e3a:	e4 16       	cp	r14, r20
     e3c:	f5 06       	cpc	r15, r21
     e3e:	94 f7       	brge	.-28     	; 0xe24 <power+0xca>
			for(int j = 0; j < n; j++)
			{
				*(c+j) = 0x00;
			}
			//do byte-array byte multiplication
			for(int j = 0; j < i; j++)
     e40:	11 96       	adiw	r26, 0x01	; 1
     e42:	21 96       	adiw	r28, 0x01	; 1
     e44:	ae 15       	cp	r26, r14
     e46:	bf 05       	cpc	r27, r15
     e48:	0c f4       	brge	.+2      	; 0xe4c <power+0xf2>
     e4a:	bb cf       	rjmp	.-138    	; 0xdc2 <power+0x68>
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
				}
			}

			for(int j = 0; j < n; j++)
			{
				*(b+j) = *(c+j);
     e50:	f8 01       	movw	r30, r16
     e52:	e2 0f       	add	r30, r18
     e54:	f3 1f       	adc	r31, r19
     e56:	db 01       	movw	r26, r22
     e58:	a2 0f       	add	r26, r18
     e5a:	b3 1f       	adc	r27, r19
     e5c:	8c 91       	ld	r24, X
     e5e:	80 83       	st	Z, r24
						}
					}
				}
			}

			for(int j = 0; j < n; j++)
     e60:	2f 5f       	subi	r18, 0xFF	; 255
     e62:	3f 4f       	sbci	r19, 0xFF	; 255
     e64:	2a 15       	cp	r18, r10
     e66:	3b 05       	cpc	r19, r11
     e68:	9c f3       	brlt	.-26     	; 0xe50 <power+0xf6>
		*(b+j) = 0x00;
	}
	if(n > 1)
	{
		*b = a;
		for(int i = 2; i <= n; i++)
     e6a:	08 94       	sec
     e6c:	e1 1c       	adc	r14, r1
     e6e:	f1 1c       	adc	r15, r1
     e70:	ae 14       	cp	r10, r14
     e72:	bf 04       	cpc	r11, r15
     e74:	64 f0       	brlt	.+24     	; 0xe8e <power+0x134>
     e76:	eb 01       	movw	r28, r22
     e78:	fb 01       	movw	r30, r22
     e7a:	9e cf       	rjmp	.-196    	; 0xdb8 <power+0x5e>
			{
				*(b+j) = *(c+j);
			}
		}
	}
	else if(n == 1)
     e7c:	f1 e0       	ldi	r31, 0x01	; 1
     e7e:	ff 16       	cp	r15, r31
     e80:	19 f4       	brne	.+6      	; 0xe88 <power+0x12e>
	{
		*b = a;
     e82:	f8 01       	movw	r30, r16
     e84:	d0 82       	st	Z, r13
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <power+0x134>
	}
	else
	{
		*b = 1;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	f8 01       	movw	r30, r16
     e8c:	80 83       	st	Z, r24
	}
	return b;
}
     e8e:	c8 01       	movw	r24, r16
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	bf 90       	pop	r11
     ea0:	af 90       	pop	r10
     ea2:	9f 90       	pop	r9
     ea4:	8f 90       	pop	r8
     ea6:	08 95       	ret

00000ea8 <randWithLimit>:
	return prime;
}

//tested
unsigned char randWithLimit(unsigned char limit, unsigned int seed)
{
     ea8:	1f 93       	push	r17
     eaa:	18 2f       	mov	r17, r24
     eac:	cb 01       	movw	r24, r22
	unsigned char randomValue = 0;
	srand(seed);
     eae:	0e 94 84 09 	call	0x1308	; 0x1308 <srand>
	int randomInt = rand();
     eb2:	0e 94 7f 09 	call	0x12fe	; 0x12fe <rand>
     eb6:	61 2f       	mov	r22, r17
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	0e 94 aa 09 	call	0x1354	; 0x1354 <__divmodhi4>
	randomValue = randomInt % limit;
	return randomValue;
}
     ebe:	1f 91       	pop	r17
     ec0:	08 95       	ret

00000ec2 <randomlyChoosePrime>:
	return a;
}

//tested
unsigned char randomlyChoosePrime(unsigned int seed)
{
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <randomlyChoosePrime+0x6>
     ec8:	00 d0       	rcall	.+0      	; 0xeca <randomlyChoosePrime+0x8>
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	bc 01       	movw	r22, r24
	//I have not included 2,or 3 because a combination of these primes may
	//	limit expressiveness of characters used(ie less than a-z)
	unsigned char PRIMES[] = {5, 7, 11, 13, 17};//, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251};
     ed2:	de 01       	movw	r26, r28
     ed4:	11 96       	adiw	r26, 0x01	; 1
     ed6:	e0 e1       	ldi	r30, 0x10	; 16
     ed8:	f1 e0       	ldi	r31, 0x01	; 1
     eda:	85 e0       	ldi	r24, 0x05	; 5
     edc:	01 90       	ld	r0, Z+
     ede:	0d 92       	st	X+, r0
     ee0:	81 50       	subi	r24, 0x01	; 1
     ee2:	e1 f7       	brne	.-8      	; 0xedc <randomlyChoosePrime+0x1a>
	unsigned char numPrimes = sizeof(PRIMES);
	unsigned char prime = 1;
	unsigned char primeIndex = randWithLimit(numPrimes, seed);
     ee4:	85 e0       	ldi	r24, 0x05	; 5
     ee6:	0e 94 54 07 	call	0xea8	; 0xea8 <randWithLimit>
     eea:	fe 01       	movw	r30, r28
     eec:	e8 0f       	add	r30, r24
     eee:	f1 1d       	adc	r31, r1
	prime = PRIMES[primeIndex];
	return prime;
}
     ef0:	81 81       	ldd	r24, Z+1	; 0x01
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <rsaEncrypt>:
#include "rsa.h"

//tested
unsigned char *rsaEncrypt(unsigned int seed)
{
     f02:	ef 92       	push	r14
     f04:	ff 92       	push	r15
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	8c 01       	movw	r16, r24
	unsigned char p = randomlyChoosePrime(seed);
     f10:	0e 94 61 07 	call	0xec2	; 0xec2 <randomlyChoosePrime>
     f14:	f8 2e       	mov	r15, r24
	//_delay_ms (1000.0);
	seed++;
	unsigned char q = randomlyChoosePrime(seed);
	while(p == q)
	{
		seed++;
     f16:	0f 5f       	subi	r16, 0xFF	; 255
     f18:	1f 4f       	sbci	r17, 0xFF	; 255
		q = randomlyChoosePrime(seed);
     f1a:	c8 01       	movw	r24, r16
     f1c:	0e 94 61 07 	call	0xec2	; 0xec2 <randomlyChoosePrime>
	unsigned char p = randomlyChoosePrime(seed);
	//display2CharsOn7SegBCD(p);
	//_delay_ms (1000.0);
	seed++;
	unsigned char q = randomlyChoosePrime(seed);
	while(p == q)
     f20:	f8 16       	cp	r15, r24
     f22:	c9 f3       	breq	.-14     	; 0xf16 <rsaEncrypt+0x14>
		seed++;
		q = randomlyChoosePrime(seed);
	}
	//display2CharsOn7SegBCD(q);
	//_delay_ms (1000.0);
	unsigned int n = p*q;
     f24:	2f 2d       	mov	r18, r15
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	82 9f       	mul	r24, r18
     f2c:	70 01       	movw	r14, r0
     f2e:	83 9f       	mul	r24, r19
     f30:	f0 0c       	add	r15, r0
     f32:	92 9f       	mul	r25, r18
     f34:	f0 0c       	add	r15, r0
     f36:	11 24       	eor	r1, r1
	//display2CharsOn7SegBCD(n);
	//_delay_ms (1000.0);
	unsigned int totient = (int)(p-1)*(int)(q-1);
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	21 50       	subi	r18, 0x01	; 1
     f3c:	30 40       	sbci	r19, 0x00	; 0
     f3e:	82 9f       	mul	r24, r18
     f40:	a0 01       	movw	r20, r0
     f42:	83 9f       	mul	r24, r19
     f44:	50 0d       	add	r21, r0
     f46:	92 9f       	mul	r25, r18
     f48:	50 0d       	add	r21, r0
     f4a:	11 24       	eor	r1, r1
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	c2 e0       	ldi	r28, 0x02	; 2
     f52:	d0 e0       	ldi	r29, 0x00	; 0
     f54:	14 c0       	rjmp	.+40     	; 0xf7e <rsaEncrypt+0x7c>
//Tested
unsigned int avrGcd(unsigned int a, unsigned int b)
{
	while(a!=b)
	{
		if(a>b)
     f56:	82 17       	cp	r24, r18
     f58:	93 07       	cpc	r25, r19
     f5a:	18 f4       	brcc	.+6      	; 0xf62 <rsaEncrypt+0x60>
		{
			a=a-b;
     f5c:	28 1b       	sub	r18, r24
     f5e:	39 0b       	sbc	r19, r25
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <rsaEncrypt+0x64>
		}
		else
		{
			b=b-a;
     f62:	82 1b       	sub	r24, r18
     f64:	93 0b       	sbc	r25, r19
}

//Tested
unsigned int avrGcd(unsigned int a, unsigned int b)
{
	while(a!=b)
     f66:	28 17       	cp	r18, r24
     f68:	39 07       	cpc	r19, r25
     f6a:	a9 f7       	brne	.-22     	; 0xf56 <rsaEncrypt+0x54>
//test
int testCoprimality(unsigned int a, unsigned int b)
{
	int coprime = 0;
	unsigned int gcdVal = avrGcd(a,b);
	if(gcdVal == 1)
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	59 f0       	breq	.+22     	; 0xf86 <rsaEncrypt+0x84>
//tested
unsigned int getCoPrimeNumber(unsigned int a, unsigned int seed)
{
	unsigned int b;
	int areCoprime = 0;
	for(b = 2; b < 0xffff; b++)
     f70:	ce 01       	movw	r24, r28
     f72:	01 96       	adiw	r24, 0x01	; 1
     f74:	2f ef       	ldi	r18, 0xFF	; 255
     f76:	8f 3f       	cpi	r24, 0xFF	; 255
     f78:	92 07       	cpc	r25, r18
     f7a:	19 f0       	breq	.+6      	; 0xf82 <rsaEncrypt+0x80>
     f7c:	ec 01       	movw	r28, r24
     f7e:	9a 01       	movw	r18, r20
     f80:	f2 cf       	rjmp	.-28     	; 0xf66 <rsaEncrypt+0x64>
     f82:	c1 e0       	ldi	r28, 0x01	; 1
     f84:	d0 e0       	ldi	r29, 0x00	; 0
	//_delay_ms (1000.0);
	seed++;
	unsigned int e = getCoPrimeNumber(totient, seed);
	//display2CharsOn7SegBCD(e);
	//_delay_ms (1000.0);
	unsigned int d = getD(totient, e);
     f86:	ca 01       	movw	r24, r20
     f88:	be 01       	movw	r22, r28
     f8a:	0e 94 46 06 	call	0xc8c	; 0xc8c <getD>
     f8e:	18 2f       	mov	r17, r24
     f90:	09 2f       	mov	r16, r25
	//display2CharsOn7SegBCD(d);
	//_delay_ms (1000.0);

	unsigned char *keys = 	(unsigned char*)malloc(sizeof(unsigned char)*6);
     f92:	86 e0       	ldi	r24, 0x06	; 6
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 29 08 	call	0x1052	; 0x1052 <malloc>
     f9a:	fc 01       	movw	r30, r24
	*(keys + 0) = (unsigned char)e;
     f9c:	c0 83       	st	Z, r28
	*(keys + 1) = (unsigned char)(e>>8);
     f9e:	d1 83       	std	Z+1, r29	; 0x01
	*(keys + 2) = (unsigned char)d;
     fa0:	12 83       	std	Z+2, r17	; 0x02
	*(keys + 3) = (unsigned char)(d>>8);
     fa2:	03 83       	std	Z+3, r16	; 0x03
	*(keys + 4) = (unsigned char)n;
     fa4:	e4 82       	std	Z+4, r14	; 0x04
	*(keys + 5) = (unsigned char)(n>>8);
     fa6:	f5 82       	std	Z+5, r15	; 0x05
	return keys;
}
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	ff 90       	pop	r15
     fb2:	ef 90       	pop	r14
     fb4:	08 95       	ret

00000fb6 <encryptDecryptByte>:

//tested
unsigned char encryptDecryptByte(unsigned char x, unsigned char p, unsigned int n)
{
     fb6:	ef 92       	push	r14
     fb8:	ff 92       	push	r15
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	08 2f       	mov	r16, r24
     fc4:	16 2f       	mov	r17, r22
     fc6:	7a 01       	movw	r14, r20
	unsigned char encryptedByte = 0;
	unsigned char temp[1];
	temp[0] = x;
	unsigned char *a = (unsigned char*)calloc(p,sizeof(unsigned char));
     fc8:	86 2f       	mov	r24, r22
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	61 e0       	ldi	r22, 0x01	; 1
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	0e 94 0d 08 	call	0x101a	; 0x101a <calloc>
	a = (unsigned char *)power(x, p);
     fd4:	80 2f       	mov	r24, r16
     fd6:	61 2f       	mov	r22, r17
     fd8:	0e 94 ad 06 	call	0xd5a	; 0xd5a <power>
	//encryptedByte = avrMod(result, p, n);
	for(int i = p-1; i >= 0; i--)
     fdc:	e1 2f       	mov	r30, r17
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	31 97       	sbiw	r30, 0x01	; 1
     fe2:	ec 01       	movw	r28, r24
     fe4:	ce 0f       	add	r28, r30
     fe6:	df 1f       	adc	r29, r31
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	0c c0       	rjmp	.+24     	; 0x1004 <encryptDecryptByte+0x4e>
	{
		// This process allows for the carry byte of previous mod operation to be included
		unsigned char currByte = *(a + i);
		unsigned int currInt = ((int)encryptedByte) << 8;
     fec:	38 2f       	mov	r19, r24
     fee:	20 e0       	ldi	r18, 0x00	; 0
		currInt += currByte;
		unsigned int remainder = currInt % n;
		encryptedByte = (unsigned char)remainder;
     ff0:	88 81       	ld	r24, Y
     ff2:	a9 01       	movw	r20, r18
     ff4:	48 0f       	add	r20, r24
     ff6:	51 1d       	adc	r21, r1
     ff8:	ca 01       	movw	r24, r20
     ffa:	b7 01       	movw	r22, r14
     ffc:	0e 94 96 09 	call	0x132c	; 0x132c <__udivmodhi4>
	unsigned char temp[1];
	temp[0] = x;
	unsigned char *a = (unsigned char*)calloc(p,sizeof(unsigned char));
	a = (unsigned char *)power(x, p);
	//encryptedByte = avrMod(result, p, n);
	for(int i = p-1; i >= 0; i--)
    1000:	31 97       	sbiw	r30, 0x01	; 1
    1002:	21 97       	sbiw	r28, 0x01	; 1
    1004:	5f ef       	ldi	r21, 0xFF	; 255
    1006:	ef 3f       	cpi	r30, 0xFF	; 255
    1008:	f5 07       	cpc	r31, r21
    100a:	81 f7       	brne	.-32     	; 0xfec <encryptDecryptByte+0x36>
		currInt += currByte;
		unsigned int remainder = currInt % n;
		encryptedByte = (unsigned char)remainder;
	}
	return encryptedByte;
}
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	ff 90       	pop	r15
    1016:	ef 90       	pop	r14
    1018:	08 95       	ret

0000101a <calloc>:
    101a:	0f 93       	push	r16
    101c:	1f 93       	push	r17
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	68 9f       	mul	r22, r24
    1024:	80 01       	movw	r16, r0
    1026:	69 9f       	mul	r22, r25
    1028:	10 0d       	add	r17, r0
    102a:	78 9f       	mul	r23, r24
    102c:	10 0d       	add	r17, r0
    102e:	11 24       	eor	r1, r1
    1030:	c8 01       	movw	r24, r16
    1032:	0e 94 29 08 	call	0x1052	; 0x1052 <malloc>
    1036:	ec 01       	movw	r28, r24
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	29 f0       	breq	.+10     	; 0x1046 <calloc+0x2c>
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	a8 01       	movw	r20, r16
    1042:	0e 94 8f 09 	call	0x131e	; 0x131e <memset>
    1046:	ce 01       	movw	r24, r28
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	08 95       	ret

00001052 <malloc>:
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	bc 01       	movw	r22, r24
    1058:	82 30       	cpi	r24, 0x02	; 2
    105a:	91 05       	cpc	r25, r1
    105c:	10 f4       	brcc	.+4      	; 0x1062 <malloc+0x10>
    105e:	62 e0       	ldi	r22, 0x02	; 2
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	a0 91 22 01 	lds	r26, 0x0122
    1066:	b0 91 23 01 	lds	r27, 0x0123
    106a:	ed 01       	movw	r28, r26
    106c:	e0 e0       	ldi	r30, 0x00	; 0
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	21 c0       	rjmp	.+66     	; 0x10b8 <malloc+0x66>
    1076:	88 81       	ld	r24, Y
    1078:	99 81       	ldd	r25, Y+1	; 0x01
    107a:	86 17       	cp	r24, r22
    107c:	97 07       	cpc	r25, r23
    107e:	69 f4       	brne	.+26     	; 0x109a <malloc+0x48>
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	9b 81       	ldd	r25, Y+3	; 0x03
    1084:	30 97       	sbiw	r30, 0x00	; 0
    1086:	19 f0       	breq	.+6      	; 0x108e <malloc+0x3c>
    1088:	93 83       	std	Z+3, r25	; 0x03
    108a:	82 83       	std	Z+2, r24	; 0x02
    108c:	04 c0       	rjmp	.+8      	; 0x1096 <malloc+0x44>
    108e:	90 93 23 01 	sts	0x0123, r25
    1092:	80 93 22 01 	sts	0x0122, r24
    1096:	fe 01       	movw	r30, r28
    1098:	34 c0       	rjmp	.+104    	; 0x1102 <malloc+0xb0>
    109a:	68 17       	cp	r22, r24
    109c:	79 07       	cpc	r23, r25
    109e:	38 f4       	brcc	.+14     	; 0x10ae <malloc+0x5c>
    10a0:	41 15       	cp	r20, r1
    10a2:	51 05       	cpc	r21, r1
    10a4:	19 f0       	breq	.+6      	; 0x10ac <malloc+0x5a>
    10a6:	84 17       	cp	r24, r20
    10a8:	95 07       	cpc	r25, r21
    10aa:	08 f4       	brcc	.+2      	; 0x10ae <malloc+0x5c>
    10ac:	ac 01       	movw	r20, r24
    10ae:	fe 01       	movw	r30, r28
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	9b 81       	ldd	r25, Y+3	; 0x03
    10b4:	9c 01       	movw	r18, r24
    10b6:	e9 01       	movw	r28, r18
    10b8:	20 97       	sbiw	r28, 0x00	; 0
    10ba:	e9 f6       	brne	.-70     	; 0x1076 <malloc+0x24>
    10bc:	41 15       	cp	r20, r1
    10be:	51 05       	cpc	r21, r1
    10c0:	a9 f1       	breq	.+106    	; 0x112c <malloc+0xda>
    10c2:	ca 01       	movw	r24, r20
    10c4:	86 1b       	sub	r24, r22
    10c6:	97 0b       	sbc	r25, r23
    10c8:	04 97       	sbiw	r24, 0x04	; 4
    10ca:	08 f4       	brcc	.+2      	; 0x10ce <malloc+0x7c>
    10cc:	ba 01       	movw	r22, r20
    10ce:	e0 e0       	ldi	r30, 0x00	; 0
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	2a c0       	rjmp	.+84     	; 0x1128 <malloc+0xd6>
    10d4:	8d 91       	ld	r24, X+
    10d6:	9c 91       	ld	r25, X
    10d8:	11 97       	sbiw	r26, 0x01	; 1
    10da:	84 17       	cp	r24, r20
    10dc:	95 07       	cpc	r25, r21
    10de:	f9 f4       	brne	.+62     	; 0x111e <malloc+0xcc>
    10e0:	64 17       	cp	r22, r20
    10e2:	75 07       	cpc	r23, r21
    10e4:	81 f4       	brne	.+32     	; 0x1106 <malloc+0xb4>
    10e6:	12 96       	adiw	r26, 0x02	; 2
    10e8:	8d 91       	ld	r24, X+
    10ea:	9c 91       	ld	r25, X
    10ec:	13 97       	sbiw	r26, 0x03	; 3
    10ee:	30 97       	sbiw	r30, 0x00	; 0
    10f0:	19 f0       	breq	.+6      	; 0x10f8 <malloc+0xa6>
    10f2:	93 83       	std	Z+3, r25	; 0x03
    10f4:	82 83       	std	Z+2, r24	; 0x02
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <malloc+0xae>
    10f8:	90 93 23 01 	sts	0x0123, r25
    10fc:	80 93 22 01 	sts	0x0122, r24
    1100:	fd 01       	movw	r30, r26
    1102:	32 96       	adiw	r30, 0x02	; 2
    1104:	4f c0       	rjmp	.+158    	; 0x11a4 <malloc+0x152>
    1106:	ca 01       	movw	r24, r20
    1108:	86 1b       	sub	r24, r22
    110a:	97 0b       	sbc	r25, r23
    110c:	fd 01       	movw	r30, r26
    110e:	e8 0f       	add	r30, r24
    1110:	f9 1f       	adc	r31, r25
    1112:	61 93       	st	Z+, r22
    1114:	71 93       	st	Z+, r23
    1116:	02 97       	sbiw	r24, 0x02	; 2
    1118:	8d 93       	st	X+, r24
    111a:	9c 93       	st	X, r25
    111c:	43 c0       	rjmp	.+134    	; 0x11a4 <malloc+0x152>
    111e:	fd 01       	movw	r30, r26
    1120:	82 81       	ldd	r24, Z+2	; 0x02
    1122:	93 81       	ldd	r25, Z+3	; 0x03
    1124:	9c 01       	movw	r18, r24
    1126:	d9 01       	movw	r26, r18
    1128:	10 97       	sbiw	r26, 0x00	; 0
    112a:	a1 f6       	brne	.-88     	; 0x10d4 <malloc+0x82>
    112c:	80 91 20 01 	lds	r24, 0x0120
    1130:	90 91 21 01 	lds	r25, 0x0121
    1134:	89 2b       	or	r24, r25
    1136:	41 f4       	brne	.+16     	; 0x1148 <malloc+0xf6>
    1138:	80 91 17 01 	lds	r24, 0x0117
    113c:	90 91 18 01 	lds	r25, 0x0118
    1140:	90 93 21 01 	sts	0x0121, r25
    1144:	80 93 20 01 	sts	0x0120, r24
    1148:	40 91 19 01 	lds	r20, 0x0119
    114c:	50 91 1a 01 	lds	r21, 0x011A
    1150:	41 15       	cp	r20, r1
    1152:	51 05       	cpc	r21, r1
    1154:	41 f4       	brne	.+16     	; 0x1166 <malloc+0x114>
    1156:	4d b7       	in	r20, 0x3d	; 61
    1158:	5e b7       	in	r21, 0x3e	; 62
    115a:	80 91 15 01 	lds	r24, 0x0115
    115e:	90 91 16 01 	lds	r25, 0x0116
    1162:	48 1b       	sub	r20, r24
    1164:	59 0b       	sbc	r21, r25
    1166:	20 91 20 01 	lds	r18, 0x0120
    116a:	30 91 21 01 	lds	r19, 0x0121
    116e:	24 17       	cp	r18, r20
    1170:	35 07       	cpc	r19, r21
    1172:	b0 f4       	brcc	.+44     	; 0x11a0 <malloc+0x14e>
    1174:	ca 01       	movw	r24, r20
    1176:	82 1b       	sub	r24, r18
    1178:	93 0b       	sbc	r25, r19
    117a:	86 17       	cp	r24, r22
    117c:	97 07       	cpc	r25, r23
    117e:	80 f0       	brcs	.+32     	; 0x11a0 <malloc+0x14e>
    1180:	ab 01       	movw	r20, r22
    1182:	4e 5f       	subi	r20, 0xFE	; 254
    1184:	5f 4f       	sbci	r21, 0xFF	; 255
    1186:	84 17       	cp	r24, r20
    1188:	95 07       	cpc	r25, r21
    118a:	50 f0       	brcs	.+20     	; 0x11a0 <malloc+0x14e>
    118c:	42 0f       	add	r20, r18
    118e:	53 1f       	adc	r21, r19
    1190:	50 93 21 01 	sts	0x0121, r21
    1194:	40 93 20 01 	sts	0x0120, r20
    1198:	f9 01       	movw	r30, r18
    119a:	61 93       	st	Z+, r22
    119c:	71 93       	st	Z+, r23
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <malloc+0x152>
    11a0:	e0 e0       	ldi	r30, 0x00	; 0
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	cf 01       	movw	r24, r30
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	08 95       	ret

000011ac <free>:
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <free+0xa>
    11b4:	50 c0       	rjmp	.+160    	; 0x1256 <free+0xaa>
    11b6:	ec 01       	movw	r28, r24
    11b8:	22 97       	sbiw	r28, 0x02	; 2
    11ba:	1b 82       	std	Y+3, r1	; 0x03
    11bc:	1a 82       	std	Y+2, r1	; 0x02
    11be:	a0 91 22 01 	lds	r26, 0x0122
    11c2:	b0 91 23 01 	lds	r27, 0x0123
    11c6:	10 97       	sbiw	r26, 0x00	; 0
    11c8:	09 f1       	breq	.+66     	; 0x120c <free+0x60>
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	ac 17       	cp	r26, r28
    11d0:	bd 07       	cpc	r27, r29
    11d2:	08 f1       	brcs	.+66     	; 0x1216 <free+0x6a>
    11d4:	bb 83       	std	Y+3, r27	; 0x03
    11d6:	aa 83       	std	Y+2, r26	; 0x02
    11d8:	fe 01       	movw	r30, r28
    11da:	21 91       	ld	r18, Z+
    11dc:	31 91       	ld	r19, Z+
    11de:	e2 0f       	add	r30, r18
    11e0:	f3 1f       	adc	r31, r19
    11e2:	ae 17       	cp	r26, r30
    11e4:	bf 07       	cpc	r27, r31
    11e6:	79 f4       	brne	.+30     	; 0x1206 <free+0x5a>
    11e8:	8d 91       	ld	r24, X+
    11ea:	9c 91       	ld	r25, X
    11ec:	11 97       	sbiw	r26, 0x01	; 1
    11ee:	28 0f       	add	r18, r24
    11f0:	39 1f       	adc	r19, r25
    11f2:	2e 5f       	subi	r18, 0xFE	; 254
    11f4:	3f 4f       	sbci	r19, 0xFF	; 255
    11f6:	39 83       	std	Y+1, r19	; 0x01
    11f8:	28 83       	st	Y, r18
    11fa:	12 96       	adiw	r26, 0x02	; 2
    11fc:	8d 91       	ld	r24, X+
    11fe:	9c 91       	ld	r25, X
    1200:	13 97       	sbiw	r26, 0x03	; 3
    1202:	9b 83       	std	Y+3, r25	; 0x03
    1204:	8a 83       	std	Y+2, r24	; 0x02
    1206:	41 15       	cp	r20, r1
    1208:	51 05       	cpc	r21, r1
    120a:	71 f4       	brne	.+28     	; 0x1228 <free+0x7c>
    120c:	d0 93 23 01 	sts	0x0123, r29
    1210:	c0 93 22 01 	sts	0x0122, r28
    1214:	20 c0       	rjmp	.+64     	; 0x1256 <free+0xaa>
    1216:	12 96       	adiw	r26, 0x02	; 2
    1218:	8d 91       	ld	r24, X+
    121a:	9c 91       	ld	r25, X
    121c:	13 97       	sbiw	r26, 0x03	; 3
    121e:	ad 01       	movw	r20, r26
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	11 f0       	breq	.+4      	; 0x1228 <free+0x7c>
    1224:	dc 01       	movw	r26, r24
    1226:	d3 cf       	rjmp	.-90     	; 0x11ce <free+0x22>
    1228:	fa 01       	movw	r30, r20
    122a:	d3 83       	std	Z+3, r29	; 0x03
    122c:	c2 83       	std	Z+2, r28	; 0x02
    122e:	21 91       	ld	r18, Z+
    1230:	31 91       	ld	r19, Z+
    1232:	e2 0f       	add	r30, r18
    1234:	f3 1f       	adc	r31, r19
    1236:	ce 17       	cp	r28, r30
    1238:	df 07       	cpc	r29, r31
    123a:	69 f4       	brne	.+26     	; 0x1256 <free+0xaa>
    123c:	88 81       	ld	r24, Y
    123e:	99 81       	ldd	r25, Y+1	; 0x01
    1240:	28 0f       	add	r18, r24
    1242:	39 1f       	adc	r19, r25
    1244:	2e 5f       	subi	r18, 0xFE	; 254
    1246:	3f 4f       	sbci	r19, 0xFF	; 255
    1248:	fa 01       	movw	r30, r20
    124a:	31 83       	std	Z+1, r19	; 0x01
    124c:	20 83       	st	Z, r18
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	9b 81       	ldd	r25, Y+3	; 0x03
    1252:	93 83       	std	Z+3, r25	; 0x03
    1254:	82 83       	std	Z+2, r24	; 0x02
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	08 95       	ret

0000125c <do_rand>:
    125c:	a0 e0       	ldi	r26, 0x00	; 0
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e4 e3       	ldi	r30, 0x34	; 52
    1262:	f9 e0       	ldi	r31, 0x09	; 9
    1264:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__prologue_saves__+0x10>
    1268:	ec 01       	movw	r28, r24
    126a:	a8 80       	ld	r10, Y
    126c:	b9 80       	ldd	r11, Y+1	; 0x01
    126e:	ca 80       	ldd	r12, Y+2	; 0x02
    1270:	db 80       	ldd	r13, Y+3	; 0x03
    1272:	a1 14       	cp	r10, r1
    1274:	b1 04       	cpc	r11, r1
    1276:	c1 04       	cpc	r12, r1
    1278:	d1 04       	cpc	r13, r1
    127a:	41 f4       	brne	.+16     	; 0x128c <do_rand+0x30>
    127c:	84 e2       	ldi	r24, 0x24	; 36
    127e:	a8 2e       	mov	r10, r24
    1280:	89 ed       	ldi	r24, 0xD9	; 217
    1282:	b8 2e       	mov	r11, r24
    1284:	8b e5       	ldi	r24, 0x5B	; 91
    1286:	c8 2e       	mov	r12, r24
    1288:	87 e0       	ldi	r24, 0x07	; 7
    128a:	d8 2e       	mov	r13, r24
    128c:	c6 01       	movw	r24, r12
    128e:	b5 01       	movw	r22, r10
    1290:	2d e1       	ldi	r18, 0x1D	; 29
    1292:	33 ef       	ldi	r19, 0xF3	; 243
    1294:	41 e0       	ldi	r20, 0x01	; 1
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__divmodsi4>
    129c:	27 ea       	ldi	r18, 0xA7	; 167
    129e:	31 e4       	ldi	r19, 0x41	; 65
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	0e 94 bd 09 	call	0x137a	; 0x137a <__mulsi3>
    12a8:	7b 01       	movw	r14, r22
    12aa:	8c 01       	movw	r16, r24
    12ac:	c6 01       	movw	r24, r12
    12ae:	b5 01       	movw	r22, r10
    12b0:	2d e1       	ldi	r18, 0x1D	; 29
    12b2:	33 ef       	ldi	r19, 0xF3	; 243
    12b4:	41 e0       	ldi	r20, 0x01	; 1
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__divmodsi4>
    12bc:	ca 01       	movw	r24, r20
    12be:	b9 01       	movw	r22, r18
    12c0:	2c ee       	ldi	r18, 0xEC	; 236
    12c2:	34 ef       	ldi	r19, 0xF4	; 244
    12c4:	4f ef       	ldi	r20, 0xFF	; 255
    12c6:	5f ef       	ldi	r21, 0xFF	; 255
    12c8:	0e 94 bd 09 	call	0x137a	; 0x137a <__mulsi3>
    12cc:	6e 0d       	add	r22, r14
    12ce:	7f 1d       	adc	r23, r15
    12d0:	80 1f       	adc	r24, r16
    12d2:	91 1f       	adc	r25, r17
    12d4:	97 ff       	sbrs	r25, 7
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <do_rand+0x84>
    12d8:	61 50       	subi	r22, 0x01	; 1
    12da:	70 40       	sbci	r23, 0x00	; 0
    12dc:	80 40       	sbci	r24, 0x00	; 0
    12de:	90 48       	sbci	r25, 0x80	; 128
    12e0:	68 83       	st	Y, r22
    12e2:	79 83       	std	Y+1, r23	; 0x01
    12e4:	8a 83       	std	Y+2, r24	; 0x02
    12e6:	9b 83       	std	Y+3, r25	; 0x03
    12e8:	9b 01       	movw	r18, r22
    12ea:	3f 77       	andi	r19, 0x7F	; 127
    12ec:	c9 01       	movw	r24, r18
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	ea e0       	ldi	r30, 0x0A	; 10
    12f4:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__epilogue_restores__+0x10>

000012f8 <rand_r>:
    12f8:	0e 94 2e 09 	call	0x125c	; 0x125c <do_rand>
    12fc:	08 95       	ret

000012fe <rand>:
    12fe:	8b e1       	ldi	r24, 0x1B	; 27
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	0e 94 2e 09 	call	0x125c	; 0x125c <do_rand>
    1306:	08 95       	ret

00001308 <srand>:
    1308:	a0 e0       	ldi	r26, 0x00	; 0
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	80 93 1b 01 	sts	0x011B, r24
    1310:	90 93 1c 01 	sts	0x011C, r25
    1314:	a0 93 1d 01 	sts	0x011D, r26
    1318:	b0 93 1e 01 	sts	0x011E, r27
    131c:	08 95       	ret

0000131e <memset>:
    131e:	dc 01       	movw	r26, r24
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <memset+0x6>
    1322:	6d 93       	st	X+, r22
    1324:	41 50       	subi	r20, 0x01	; 1
    1326:	50 40       	sbci	r21, 0x00	; 0
    1328:	e0 f7       	brcc	.-8      	; 0x1322 <memset+0x4>
    132a:	08 95       	ret

0000132c <__udivmodhi4>:
    132c:	aa 1b       	sub	r26, r26
    132e:	bb 1b       	sub	r27, r27
    1330:	51 e1       	ldi	r21, 0x11	; 17
    1332:	07 c0       	rjmp	.+14     	; 0x1342 <__udivmodhi4_ep>

00001334 <__udivmodhi4_loop>:
    1334:	aa 1f       	adc	r26, r26
    1336:	bb 1f       	adc	r27, r27
    1338:	a6 17       	cp	r26, r22
    133a:	b7 07       	cpc	r27, r23
    133c:	10 f0       	brcs	.+4      	; 0x1342 <__udivmodhi4_ep>
    133e:	a6 1b       	sub	r26, r22
    1340:	b7 0b       	sbc	r27, r23

00001342 <__udivmodhi4_ep>:
    1342:	88 1f       	adc	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	5a 95       	dec	r21
    1348:	a9 f7       	brne	.-22     	; 0x1334 <__udivmodhi4_loop>
    134a:	80 95       	com	r24
    134c:	90 95       	com	r25
    134e:	bc 01       	movw	r22, r24
    1350:	cd 01       	movw	r24, r26
    1352:	08 95       	ret

00001354 <__divmodhi4>:
    1354:	97 fb       	bst	r25, 7
    1356:	09 2e       	mov	r0, r25
    1358:	07 26       	eor	r0, r23
    135a:	0a d0       	rcall	.+20     	; 0x1370 <__divmodhi4_neg1>
    135c:	77 fd       	sbrc	r23, 7
    135e:	04 d0       	rcall	.+8      	; 0x1368 <__divmodhi4_neg2>
    1360:	e5 df       	rcall	.-54     	; 0x132c <__udivmodhi4>
    1362:	06 d0       	rcall	.+12     	; 0x1370 <__divmodhi4_neg1>
    1364:	00 20       	and	r0, r0
    1366:	1a f4       	brpl	.+6      	; 0x136e <__divmodhi4_exit>

00001368 <__divmodhi4_neg2>:
    1368:	70 95       	com	r23
    136a:	61 95       	neg	r22
    136c:	7f 4f       	sbci	r23, 0xFF	; 255

0000136e <__divmodhi4_exit>:
    136e:	08 95       	ret

00001370 <__divmodhi4_neg1>:
    1370:	f6 f7       	brtc	.-4      	; 0x136e <__divmodhi4_exit>
    1372:	90 95       	com	r25
    1374:	81 95       	neg	r24
    1376:	9f 4f       	sbci	r25, 0xFF	; 255
    1378:	08 95       	ret

0000137a <__mulsi3>:
    137a:	62 9f       	mul	r22, r18
    137c:	d0 01       	movw	r26, r0
    137e:	73 9f       	mul	r23, r19
    1380:	f0 01       	movw	r30, r0
    1382:	82 9f       	mul	r24, r18
    1384:	e0 0d       	add	r30, r0
    1386:	f1 1d       	adc	r31, r1
    1388:	64 9f       	mul	r22, r20
    138a:	e0 0d       	add	r30, r0
    138c:	f1 1d       	adc	r31, r1
    138e:	92 9f       	mul	r25, r18
    1390:	f0 0d       	add	r31, r0
    1392:	83 9f       	mul	r24, r19
    1394:	f0 0d       	add	r31, r0
    1396:	74 9f       	mul	r23, r20
    1398:	f0 0d       	add	r31, r0
    139a:	65 9f       	mul	r22, r21
    139c:	f0 0d       	add	r31, r0
    139e:	99 27       	eor	r25, r25
    13a0:	72 9f       	mul	r23, r18
    13a2:	b0 0d       	add	r27, r0
    13a4:	e1 1d       	adc	r30, r1
    13a6:	f9 1f       	adc	r31, r25
    13a8:	63 9f       	mul	r22, r19
    13aa:	b0 0d       	add	r27, r0
    13ac:	e1 1d       	adc	r30, r1
    13ae:	f9 1f       	adc	r31, r25
    13b0:	bd 01       	movw	r22, r26
    13b2:	cf 01       	movw	r24, r30
    13b4:	11 24       	eor	r1, r1
    13b6:	08 95       	ret

000013b8 <__divmodsi4>:
    13b8:	97 fb       	bst	r25, 7
    13ba:	09 2e       	mov	r0, r25
    13bc:	05 26       	eor	r0, r21
    13be:	0e d0       	rcall	.+28     	; 0x13dc <__divmodsi4_neg1>
    13c0:	57 fd       	sbrc	r21, 7
    13c2:	04 d0       	rcall	.+8      	; 0x13cc <__divmodsi4_neg2>
    13c4:	4b d0       	rcall	.+150    	; 0x145c <__udivmodsi4>
    13c6:	0a d0       	rcall	.+20     	; 0x13dc <__divmodsi4_neg1>
    13c8:	00 1c       	adc	r0, r0
    13ca:	38 f4       	brcc	.+14     	; 0x13da <__divmodsi4_exit>

000013cc <__divmodsi4_neg2>:
    13cc:	50 95       	com	r21
    13ce:	40 95       	com	r20
    13d0:	30 95       	com	r19
    13d2:	21 95       	neg	r18
    13d4:	3f 4f       	sbci	r19, 0xFF	; 255
    13d6:	4f 4f       	sbci	r20, 0xFF	; 255
    13d8:	5f 4f       	sbci	r21, 0xFF	; 255

000013da <__divmodsi4_exit>:
    13da:	08 95       	ret

000013dc <__divmodsi4_neg1>:
    13dc:	f6 f7       	brtc	.-4      	; 0x13da <__divmodsi4_exit>
    13de:	90 95       	com	r25
    13e0:	80 95       	com	r24
    13e2:	70 95       	com	r23
    13e4:	61 95       	neg	r22
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ea:	9f 4f       	sbci	r25, 0xFF	; 255
    13ec:	08 95       	ret

000013ee <__prologue_saves__>:
    13ee:	2f 92       	push	r2
    13f0:	3f 92       	push	r3
    13f2:	4f 92       	push	r4
    13f4:	5f 92       	push	r5
    13f6:	6f 92       	push	r6
    13f8:	7f 92       	push	r7
    13fa:	8f 92       	push	r8
    13fc:	9f 92       	push	r9
    13fe:	af 92       	push	r10
    1400:	bf 92       	push	r11
    1402:	cf 92       	push	r12
    1404:	df 92       	push	r13
    1406:	ef 92       	push	r14
    1408:	ff 92       	push	r15
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	ca 1b       	sub	r28, r26
    1418:	db 0b       	sbc	r29, r27
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	09 94       	ijmp

00001426 <__epilogue_restores__>:
    1426:	2a 88       	ldd	r2, Y+18	; 0x12
    1428:	39 88       	ldd	r3, Y+17	; 0x11
    142a:	48 88       	ldd	r4, Y+16	; 0x10
    142c:	5f 84       	ldd	r5, Y+15	; 0x0f
    142e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1430:	7d 84       	ldd	r7, Y+13	; 0x0d
    1432:	8c 84       	ldd	r8, Y+12	; 0x0c
    1434:	9b 84       	ldd	r9, Y+11	; 0x0b
    1436:	aa 84       	ldd	r10, Y+10	; 0x0a
    1438:	b9 84       	ldd	r11, Y+9	; 0x09
    143a:	c8 84       	ldd	r12, Y+8	; 0x08
    143c:	df 80       	ldd	r13, Y+7	; 0x07
    143e:	ee 80       	ldd	r14, Y+6	; 0x06
    1440:	fd 80       	ldd	r15, Y+5	; 0x05
    1442:	0c 81       	ldd	r16, Y+4	; 0x04
    1444:	1b 81       	ldd	r17, Y+3	; 0x03
    1446:	aa 81       	ldd	r26, Y+2	; 0x02
    1448:	b9 81       	ldd	r27, Y+1	; 0x01
    144a:	ce 0f       	add	r28, r30
    144c:	d1 1d       	adc	r29, r1
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	ed 01       	movw	r28, r26
    145a:	08 95       	ret

0000145c <__udivmodsi4>:
    145c:	a1 e2       	ldi	r26, 0x21	; 33
    145e:	1a 2e       	mov	r1, r26
    1460:	aa 1b       	sub	r26, r26
    1462:	bb 1b       	sub	r27, r27
    1464:	fd 01       	movw	r30, r26
    1466:	0d c0       	rjmp	.+26     	; 0x1482 <__udivmodsi4_ep>

00001468 <__udivmodsi4_loop>:
    1468:	aa 1f       	adc	r26, r26
    146a:	bb 1f       	adc	r27, r27
    146c:	ee 1f       	adc	r30, r30
    146e:	ff 1f       	adc	r31, r31
    1470:	a2 17       	cp	r26, r18
    1472:	b3 07       	cpc	r27, r19
    1474:	e4 07       	cpc	r30, r20
    1476:	f5 07       	cpc	r31, r21
    1478:	20 f0       	brcs	.+8      	; 0x1482 <__udivmodsi4_ep>
    147a:	a2 1b       	sub	r26, r18
    147c:	b3 0b       	sbc	r27, r19
    147e:	e4 0b       	sbc	r30, r20
    1480:	f5 0b       	sbc	r31, r21

00001482 <__udivmodsi4_ep>:
    1482:	66 1f       	adc	r22, r22
    1484:	77 1f       	adc	r23, r23
    1486:	88 1f       	adc	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	1a 94       	dec	r1
    148c:	69 f7       	brne	.-38     	; 0x1468 <__udivmodsi4_loop>
    148e:	60 95       	com	r22
    1490:	70 95       	com	r23
    1492:	80 95       	com	r24
    1494:	90 95       	com	r25
    1496:	9b 01       	movw	r18, r22
    1498:	ac 01       	movw	r20, r24
    149a:	bd 01       	movw	r22, r26
    149c:	cf 01       	movw	r24, r30
    149e:	08 95       	ret

000014a0 <_exit>:
    14a0:	f8 94       	cli

000014a2 <__stop_program>:
    14a2:	ff cf       	rjmp	.-2      	; 0x14a2 <__stop_program>
